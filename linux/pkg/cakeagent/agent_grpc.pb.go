// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: agent.proto

package cakeagent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CakeAgentService_ResizeDisk_FullMethodName = "/cakeagent.CakeAgentService/ResizeDisk"
	CakeAgentService_Info_FullMethodName       = "/cakeagent.CakeAgentService/Info"
	CakeAgentService_Shutdown_FullMethodName   = "/cakeagent.CakeAgentService/Shutdown"
	CakeAgentService_Run_FullMethodName        = "/cakeagent.CakeAgentService/Run"
	CakeAgentService_Execute_FullMethodName    = "/cakeagent.CakeAgentService/Execute"
	CakeAgentService_Mount_FullMethodName      = "/cakeagent.CakeAgentService/Mount"
	CakeAgentService_Umount_FullMethodName     = "/cakeagent.CakeAgentService/Umount"
)

// CakeAgentServiceClient is the client API for CakeAgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CakeAgentServiceClient interface {
	ResizeDisk(ctx context.Context, in *CakeAgent_Empty, opts ...grpc.CallOption) (*CakeAgent_ResizeReply, error)
	Info(ctx context.Context, in *CakeAgent_Empty, opts ...grpc.CallOption) (*CakeAgent_InfoReply, error)
	Shutdown(ctx context.Context, in *CakeAgent_Empty, opts ...grpc.CallOption) (*CakeAgent_RunReply, error)
	Run(ctx context.Context, in *CakeAgent_RunCommand, opts ...grpc.CallOption) (*CakeAgent_RunReply, error)
	Execute(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CakeAgent_ExecuteRequest, CakeAgent_ExecuteResponse], error)
	Mount(ctx context.Context, in *CakeAgent_MountRequest, opts ...grpc.CallOption) (*CakeAgent_MountReply, error)
	Umount(ctx context.Context, in *CakeAgent_MountRequest, opts ...grpc.CallOption) (*CakeAgent_MountReply, error)
}

type cakeAgentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCakeAgentServiceClient(cc grpc.ClientConnInterface) CakeAgentServiceClient {
	return &cakeAgentServiceClient{cc}
}

func (c *cakeAgentServiceClient) ResizeDisk(ctx context.Context, in *CakeAgent_Empty, opts ...grpc.CallOption) (*CakeAgent_ResizeReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CakeAgent_ResizeReply)
	err := c.cc.Invoke(ctx, CakeAgentService_ResizeDisk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cakeAgentServiceClient) Info(ctx context.Context, in *CakeAgent_Empty, opts ...grpc.CallOption) (*CakeAgent_InfoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CakeAgent_InfoReply)
	err := c.cc.Invoke(ctx, CakeAgentService_Info_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cakeAgentServiceClient) Shutdown(ctx context.Context, in *CakeAgent_Empty, opts ...grpc.CallOption) (*CakeAgent_RunReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CakeAgent_RunReply)
	err := c.cc.Invoke(ctx, CakeAgentService_Shutdown_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cakeAgentServiceClient) Run(ctx context.Context, in *CakeAgent_RunCommand, opts ...grpc.CallOption) (*CakeAgent_RunReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CakeAgent_RunReply)
	err := c.cc.Invoke(ctx, CakeAgentService_Run_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cakeAgentServiceClient) Execute(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CakeAgent_ExecuteRequest, CakeAgent_ExecuteResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CakeAgentService_ServiceDesc.Streams[0], CakeAgentService_Execute_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CakeAgent_ExecuteRequest, CakeAgent_ExecuteResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CakeAgentService_ExecuteClient = grpc.BidiStreamingClient[CakeAgent_ExecuteRequest, CakeAgent_ExecuteResponse]

func (c *cakeAgentServiceClient) Mount(ctx context.Context, in *CakeAgent_MountRequest, opts ...grpc.CallOption) (*CakeAgent_MountReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CakeAgent_MountReply)
	err := c.cc.Invoke(ctx, CakeAgentService_Mount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cakeAgentServiceClient) Umount(ctx context.Context, in *CakeAgent_MountRequest, opts ...grpc.CallOption) (*CakeAgent_MountReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CakeAgent_MountReply)
	err := c.cc.Invoke(ctx, CakeAgentService_Umount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CakeAgentServiceServer is the server API for CakeAgentService service.
// All implementations must embed UnimplementedCakeAgentServiceServer
// for forward compatibility.
type CakeAgentServiceServer interface {
	ResizeDisk(context.Context, *CakeAgent_Empty) (*CakeAgent_ResizeReply, error)
	Info(context.Context, *CakeAgent_Empty) (*CakeAgent_InfoReply, error)
	Shutdown(context.Context, *CakeAgent_Empty) (*CakeAgent_RunReply, error)
	Run(context.Context, *CakeAgent_RunCommand) (*CakeAgent_RunReply, error)
	Execute(grpc.BidiStreamingServer[CakeAgent_ExecuteRequest, CakeAgent_ExecuteResponse]) error
	Mount(context.Context, *CakeAgent_MountRequest) (*CakeAgent_MountReply, error)
	Umount(context.Context, *CakeAgent_MountRequest) (*CakeAgent_MountReply, error)
	mustEmbedUnimplementedCakeAgentServiceServer()
}

// UnimplementedCakeAgentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCakeAgentServiceServer struct{}

func (UnimplementedCakeAgentServiceServer) ResizeDisk(context.Context, *CakeAgent_Empty) (*CakeAgent_ResizeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResizeDisk not implemented")
}
func (UnimplementedCakeAgentServiceServer) Info(context.Context, *CakeAgent_Empty) (*CakeAgent_InfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedCakeAgentServiceServer) Shutdown(context.Context, *CakeAgent_Empty) (*CakeAgent_RunReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedCakeAgentServiceServer) Run(context.Context, *CakeAgent_RunCommand) (*CakeAgent_RunReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedCakeAgentServiceServer) Execute(grpc.BidiStreamingServer[CakeAgent_ExecuteRequest, CakeAgent_ExecuteResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedCakeAgentServiceServer) Mount(context.Context, *CakeAgent_MountRequest) (*CakeAgent_MountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mount not implemented")
}
func (UnimplementedCakeAgentServiceServer) Umount(context.Context, *CakeAgent_MountRequest) (*CakeAgent_MountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Umount not implemented")
}
func (UnimplementedCakeAgentServiceServer) mustEmbedUnimplementedCakeAgentServiceServer() {}
func (UnimplementedCakeAgentServiceServer) testEmbeddedByValue()                          {}

// UnsafeCakeAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CakeAgentServiceServer will
// result in compilation errors.
type UnsafeCakeAgentServiceServer interface {
	mustEmbedUnimplementedCakeAgentServiceServer()
}

func RegisterCakeAgentServiceServer(s grpc.ServiceRegistrar, srv CakeAgentServiceServer) {
	// If the following call pancis, it indicates UnimplementedCakeAgentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CakeAgentService_ServiceDesc, srv)
}

func _CakeAgentService_ResizeDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CakeAgent_Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CakeAgentServiceServer).ResizeDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CakeAgentService_ResizeDisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CakeAgentServiceServer).ResizeDisk(ctx, req.(*CakeAgent_Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CakeAgentService_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CakeAgent_Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CakeAgentServiceServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CakeAgentService_Info_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CakeAgentServiceServer).Info(ctx, req.(*CakeAgent_Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CakeAgentService_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CakeAgent_Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CakeAgentServiceServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CakeAgentService_Shutdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CakeAgentServiceServer).Shutdown(ctx, req.(*CakeAgent_Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CakeAgentService_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CakeAgent_RunCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CakeAgentServiceServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CakeAgentService_Run_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CakeAgentServiceServer).Run(ctx, req.(*CakeAgent_RunCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _CakeAgentService_Execute_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CakeAgentServiceServer).Execute(&grpc.GenericServerStream[CakeAgent_ExecuteRequest, CakeAgent_ExecuteResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CakeAgentService_ExecuteServer = grpc.BidiStreamingServer[CakeAgent_ExecuteRequest, CakeAgent_ExecuteResponse]

func _CakeAgentService_Mount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CakeAgent_MountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CakeAgentServiceServer).Mount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CakeAgentService_Mount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CakeAgentServiceServer).Mount(ctx, req.(*CakeAgent_MountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CakeAgentService_Umount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CakeAgent_MountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CakeAgentServiceServer).Umount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CakeAgentService_Umount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CakeAgentServiceServer).Umount(ctx, req.(*CakeAgent_MountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CakeAgentService_ServiceDesc is the grpc.ServiceDesc for CakeAgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CakeAgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cakeagent.CakeAgentService",
	HandlerType: (*CakeAgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ResizeDisk",
			Handler:    _CakeAgentService_ResizeDisk_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _CakeAgentService_Info_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _CakeAgentService_Shutdown_Handler,
		},
		{
			MethodName: "Run",
			Handler:    _CakeAgentService_Run_Handler,
		},
		{
			MethodName: "Mount",
			Handler:    _CakeAgentService_Mount_Handler,
		},
		{
			MethodName: "Umount",
			Handler:    _CakeAgentService_Umount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Execute",
			Handler:       _CakeAgentService_Execute_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "agent.proto",
}

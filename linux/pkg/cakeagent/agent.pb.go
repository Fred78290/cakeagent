// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.29.3
// source: agent.proto

package cakeagent

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResizeReply struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*ResizeReply_Success
	//	*ResizeReply_Failure
	Response      isResizeReply_Response `protobuf_oneof:"Response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResizeReply) Reset() {
	*x = ResizeReply{}
	mi := &file_agent_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResizeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResizeReply) ProtoMessage() {}

func (x *ResizeReply) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResizeReply.ProtoReflect.Descriptor instead.
func (*ResizeReply) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{0}
}

func (x *ResizeReply) GetResponse() isResizeReply_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ResizeReply) GetSuccess() bool {
	if x != nil {
		if x, ok := x.Response.(*ResizeReply_Success); ok {
			return x.Success
		}
	}
	return false
}

func (x *ResizeReply) GetFailure() string {
	if x != nil {
		if x, ok := x.Response.(*ResizeReply_Failure); ok {
			return x.Failure
		}
	}
	return ""
}

type isResizeReply_Response interface {
	isResizeReply_Response()
}

type ResizeReply_Success struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3,oneof"`
}

type ResizeReply_Failure struct {
	Failure string `protobuf:"bytes,2,opt,name=failure,proto3,oneof"`
}

func (*ResizeReply_Success) isResizeReply_Response() {}

func (*ResizeReply_Failure) isResizeReply_Response() {}

type InfoReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Uptime        uint64                 `protobuf:"varint,2,opt,name=uptime,proto3" json:"uptime,omitempty"`
	Memory        *InfoReply_MemoryInfo  `protobuf:"bytes,3,opt,name=memory,proto3" json:"memory,omitempty"`
	CpuCount      int32                  `protobuf:"varint,4,opt,name=cpuCount,proto3" json:"cpuCount,omitempty"`
	DiskInfos     []*InfoReply_DiskInfo  `protobuf:"bytes,5,rep,name=diskInfos,proto3" json:"diskInfos,omitempty"`
	Ipaddresses   []string               `protobuf:"bytes,6,rep,name=ipaddresses,proto3" json:"ipaddresses,omitempty"`
	Osname        string                 `protobuf:"bytes,7,opt,name=osname,proto3" json:"osname,omitempty"`
	Hostname      string                 `protobuf:"bytes,8,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Release       string                 `protobuf:"bytes,9,opt,name=release,proto3" json:"release,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InfoReply) Reset() {
	*x = InfoReply{}
	mi := &file_agent_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoReply) ProtoMessage() {}

func (x *InfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoReply.ProtoReflect.Descriptor instead.
func (*InfoReply) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{1}
}

func (x *InfoReply) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *InfoReply) GetUptime() uint64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *InfoReply) GetMemory() *InfoReply_MemoryInfo {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *InfoReply) GetCpuCount() int32 {
	if x != nil {
		return x.CpuCount
	}
	return 0
}

func (x *InfoReply) GetDiskInfos() []*InfoReply_DiskInfo {
	if x != nil {
		return x.DiskInfos
	}
	return nil
}

func (x *InfoReply) GetIpaddresses() []string {
	if x != nil {
		return x.Ipaddresses
	}
	return nil
}

func (x *InfoReply) GetOsname() string {
	if x != nil {
		return x.Osname
	}
	return ""
}

func (x *InfoReply) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *InfoReply) GetRelease() string {
	if x != nil {
		return x.Release
	}
	return ""
}

type Command struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Command       string                 `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Args          []string               `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Command) Reset() {
	*x = Command{}
	mi := &file_agent_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{2}
}

func (x *Command) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *Command) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

type RunCommand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Command       *Command               `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Input         []byte                 `protobuf:"bytes,2,opt,name=input,proto3,oneof" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunCommand) Reset() {
	*x = RunCommand{}
	mi := &file_agent_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCommand) ProtoMessage() {}

func (x *RunCommand) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCommand.ProtoReflect.Descriptor instead.
func (*RunCommand) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{3}
}

func (x *RunCommand) GetCommand() *Command {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *RunCommand) GetInput() []byte {
	if x != nil {
		return x.Input
	}
	return nil
}

type ExecuteCommand struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Execute:
	//
	//	*ExecuteCommand_Command
	//	*ExecuteCommand_Shell
	Execute       isExecuteCommand_Execute `protobuf_oneof:"execute"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteCommand) Reset() {
	*x = ExecuteCommand{}
	mi := &file_agent_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteCommand) ProtoMessage() {}

func (x *ExecuteCommand) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteCommand.ProtoReflect.Descriptor instead.
func (*ExecuteCommand) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{4}
}

func (x *ExecuteCommand) GetExecute() isExecuteCommand_Execute {
	if x != nil {
		return x.Execute
	}
	return nil
}

func (x *ExecuteCommand) GetCommand() *Command {
	if x != nil {
		if x, ok := x.Execute.(*ExecuteCommand_Command); ok {
			return x.Command
		}
	}
	return nil
}

func (x *ExecuteCommand) GetShell() bool {
	if x != nil {
		if x, ok := x.Execute.(*ExecuteCommand_Shell); ok {
			return x.Shell
		}
	}
	return false
}

type isExecuteCommand_Execute interface {
	isExecuteCommand_Execute()
}

type ExecuteCommand_Command struct {
	Command *Command `protobuf:"bytes,1,opt,name=command,proto3,oneof"`
}

type ExecuteCommand_Shell struct {
	Shell bool `protobuf:"varint,2,opt,name=shell,proto3,oneof"`
}

func (*ExecuteCommand_Command) isExecuteCommand_Execute() {}

func (*ExecuteCommand_Shell) isExecuteCommand_Execute() {}

type TerminalSize struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rows          int32                  `protobuf:"varint,1,opt,name=rows,proto3" json:"rows,omitempty"`
	Cols          int32                  `protobuf:"varint,2,opt,name=cols,proto3" json:"cols,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TerminalSize) Reset() {
	*x = TerminalSize{}
	mi := &file_agent_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TerminalSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalSize) ProtoMessage() {}

func (x *TerminalSize) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalSize.ProtoReflect.Descriptor instead.
func (*TerminalSize) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{5}
}

func (x *TerminalSize) GetRows() int32 {
	if x != nil {
		return x.Rows
	}
	return 0
}

func (x *TerminalSize) GetCols() int32 {
	if x != nil {
		return x.Cols
	}
	return 0
}

type ExecuteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Request:
	//
	//	*ExecuteRequest_Command
	//	*ExecuteRequest_Input
	//	*ExecuteRequest_Size
	//	*ExecuteRequest_Eof
	Request       isExecuteRequest_Request `protobuf_oneof:"request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteRequest) Reset() {
	*x = ExecuteRequest{}
	mi := &file_agent_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteRequest) ProtoMessage() {}

func (x *ExecuteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteRequest.ProtoReflect.Descriptor instead.
func (*ExecuteRequest) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{6}
}

func (x *ExecuteRequest) GetRequest() isExecuteRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ExecuteRequest) GetCommand() *ExecuteCommand {
	if x != nil {
		if x, ok := x.Request.(*ExecuteRequest_Command); ok {
			return x.Command
		}
	}
	return nil
}

func (x *ExecuteRequest) GetInput() []byte {
	if x != nil {
		if x, ok := x.Request.(*ExecuteRequest_Input); ok {
			return x.Input
		}
	}
	return nil
}

func (x *ExecuteRequest) GetSize() *TerminalSize {
	if x != nil {
		if x, ok := x.Request.(*ExecuteRequest_Size); ok {
			return x.Size
		}
	}
	return nil
}

func (x *ExecuteRequest) GetEof() bool {
	if x != nil {
		if x, ok := x.Request.(*ExecuteRequest_Eof); ok {
			return x.Eof
		}
	}
	return false
}

type isExecuteRequest_Request interface {
	isExecuteRequest_Request()
}

type ExecuteRequest_Command struct {
	Command *ExecuteCommand `protobuf:"bytes,1,opt,name=command,proto3,oneof"`
}

type ExecuteRequest_Input struct {
	Input []byte `protobuf:"bytes,2,opt,name=input,proto3,oneof"`
}

type ExecuteRequest_Size struct {
	Size *TerminalSize `protobuf:"bytes,3,opt,name=size,proto3,oneof"`
}

type ExecuteRequest_Eof struct {
	Eof bool `protobuf:"varint,4,opt,name=eof,proto3,oneof"`
}

func (*ExecuteRequest_Command) isExecuteRequest_Request() {}

func (*ExecuteRequest_Input) isExecuteRequest_Request() {}

func (*ExecuteRequest_Size) isExecuteRequest_Request() {}

func (*ExecuteRequest_Eof) isExecuteRequest_Request() {}

type RunReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ExitCode      int32                  `protobuf:"varint,1,opt,name=exitCode,proto3" json:"exitCode,omitempty"`
	Stdout        []byte                 `protobuf:"bytes,2,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr        []byte                 `protobuf:"bytes,3,opt,name=stderr,proto3" json:"stderr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunReply) Reset() {
	*x = RunReply{}
	mi := &file_agent_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunReply) ProtoMessage() {}

func (x *RunReply) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunReply.ProtoReflect.Descriptor instead.
func (*RunReply) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{7}
}

func (x *RunReply) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *RunReply) GetStdout() []byte {
	if x != nil {
		return x.Stdout
	}
	return nil
}

func (x *RunReply) GetStderr() []byte {
	if x != nil {
		return x.Stderr
	}
	return nil
}

type ExecuteResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*ExecuteResponse_ExitCode
	//	*ExecuteResponse_Stdout
	//	*ExecuteResponse_Stderr
	//	*ExecuteResponse_Established
	Response      isExecuteResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteResponse) Reset() {
	*x = ExecuteResponse{}
	mi := &file_agent_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteResponse) ProtoMessage() {}

func (x *ExecuteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteResponse.ProtoReflect.Descriptor instead.
func (*ExecuteResponse) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{8}
}

func (x *ExecuteResponse) GetResponse() isExecuteResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ExecuteResponse) GetExitCode() int32 {
	if x != nil {
		if x, ok := x.Response.(*ExecuteResponse_ExitCode); ok {
			return x.ExitCode
		}
	}
	return 0
}

func (x *ExecuteResponse) GetStdout() []byte {
	if x != nil {
		if x, ok := x.Response.(*ExecuteResponse_Stdout); ok {
			return x.Stdout
		}
	}
	return nil
}

func (x *ExecuteResponse) GetStderr() []byte {
	if x != nil {
		if x, ok := x.Response.(*ExecuteResponse_Stderr); ok {
			return x.Stderr
		}
	}
	return nil
}

func (x *ExecuteResponse) GetEstablished() bool {
	if x != nil {
		if x, ok := x.Response.(*ExecuteResponse_Established); ok {
			return x.Established
		}
	}
	return false
}

type isExecuteResponse_Response interface {
	isExecuteResponse_Response()
}

type ExecuteResponse_ExitCode struct {
	ExitCode int32 `protobuf:"varint,1,opt,name=exitCode,proto3,oneof"`
}

type ExecuteResponse_Stdout struct {
	Stdout []byte `protobuf:"bytes,2,opt,name=stdout,proto3,oneof"`
}

type ExecuteResponse_Stderr struct {
	Stderr []byte `protobuf:"bytes,3,opt,name=stderr,proto3,oneof"`
}

type ExecuteResponse_Established struct {
	Established bool `protobuf:"varint,4,opt,name=established,proto3,oneof"`
}

func (*ExecuteResponse_ExitCode) isExecuteResponse_Response() {}

func (*ExecuteResponse_Stdout) isExecuteResponse_Response() {}

func (*ExecuteResponse_Stderr) isExecuteResponse_Response() {}

func (*ExecuteResponse_Established) isExecuteResponse_Response() {}

type MountVirtioFS struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Target        string                 `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	Uid           int32                  `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Gid           int32                  `protobuf:"varint,4,opt,name=gid,proto3" json:"gid,omitempty"`
	Readonly      bool                   `protobuf:"varint,5,opt,name=readonly,proto3" json:"readonly,omitempty"`
	Early         bool                   `protobuf:"varint,6,opt,name=early,proto3" json:"early,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MountVirtioFS) Reset() {
	*x = MountVirtioFS{}
	mi := &file_agent_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MountVirtioFS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountVirtioFS) ProtoMessage() {}

func (x *MountVirtioFS) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountVirtioFS.ProtoReflect.Descriptor instead.
func (*MountVirtioFS) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{9}
}

func (x *MountVirtioFS) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MountVirtioFS) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *MountVirtioFS) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MountVirtioFS) GetGid() int32 {
	if x != nil {
		return x.Gid
	}
	return 0
}

func (x *MountVirtioFS) GetReadonly() bool {
	if x != nil {
		return x.Readonly
	}
	return false
}

func (x *MountVirtioFS) GetEarly() bool {
	if x != nil {
		return x.Early
	}
	return false
}

type MountRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mounts        []*MountVirtioFS       `protobuf:"bytes,1,rep,name=mounts,proto3" json:"mounts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MountRequest) Reset() {
	*x = MountRequest{}
	mi := &file_agent_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountRequest) ProtoMessage() {}

func (x *MountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountRequest.ProtoReflect.Descriptor instead.
func (*MountRequest) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{10}
}

func (x *MountRequest) GetMounts() []*MountVirtioFS {
	if x != nil {
		return x.Mounts
	}
	return nil
}

type MountVirtioFSReply struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to Response:
	//
	//	*MountVirtioFSReply_Error
	//	*MountVirtioFSReply_Success
	Response      isMountVirtioFSReply_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MountVirtioFSReply) Reset() {
	*x = MountVirtioFSReply{}
	mi := &file_agent_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MountVirtioFSReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountVirtioFSReply) ProtoMessage() {}

func (x *MountVirtioFSReply) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountVirtioFSReply.ProtoReflect.Descriptor instead.
func (*MountVirtioFSReply) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{11}
}

func (x *MountVirtioFSReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MountVirtioFSReply) GetResponse() isMountVirtioFSReply_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *MountVirtioFSReply) GetError() string {
	if x != nil {
		if x, ok := x.Response.(*MountVirtioFSReply_Error); ok {
			return x.Error
		}
	}
	return ""
}

func (x *MountVirtioFSReply) GetSuccess() bool {
	if x != nil {
		if x, ok := x.Response.(*MountVirtioFSReply_Success); ok {
			return x.Success
		}
	}
	return false
}

type isMountVirtioFSReply_Response interface {
	isMountVirtioFSReply_Response()
}

type MountVirtioFSReply_Error struct {
	Error string `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

type MountVirtioFSReply_Success struct {
	Success bool `protobuf:"varint,3,opt,name=success,proto3,oneof"`
}

func (*MountVirtioFSReply_Error) isMountVirtioFSReply_Response() {}

func (*MountVirtioFSReply_Success) isMountVirtioFSReply_Response() {}

type MountReply struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Mounts []*MountVirtioFSReply  `protobuf:"bytes,1,rep,name=mounts,proto3" json:"mounts,omitempty"`
	// Types that are valid to be assigned to Response:
	//
	//	*MountReply_Error
	//	*MountReply_Success
	Response      isMountReply_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MountReply) Reset() {
	*x = MountReply{}
	mi := &file_agent_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MountReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountReply) ProtoMessage() {}

func (x *MountReply) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountReply.ProtoReflect.Descriptor instead.
func (*MountReply) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{12}
}

func (x *MountReply) GetMounts() []*MountVirtioFSReply {
	if x != nil {
		return x.Mounts
	}
	return nil
}

func (x *MountReply) GetResponse() isMountReply_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *MountReply) GetError() string {
	if x != nil {
		if x, ok := x.Response.(*MountReply_Error); ok {
			return x.Error
		}
	}
	return ""
}

func (x *MountReply) GetSuccess() bool {
	if x != nil {
		if x, ok := x.Response.(*MountReply_Success); ok {
			return x.Success
		}
	}
	return false
}

type isMountReply_Response interface {
	isMountReply_Response()
}

type MountReply_Error struct {
	Error string `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

type MountReply_Success struct {
	Success bool `protobuf:"varint,3,opt,name=success,proto3,oneof"`
}

func (*MountReply_Error) isMountReply_Response() {}

func (*MountReply_Success) isMountReply_Response() {}

type InfoReply_MemoryInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         uint64                 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Free          uint64                 `protobuf:"varint,2,opt,name=free,proto3" json:"free,omitempty"`
	Used          uint64                 `protobuf:"varint,3,opt,name=used,proto3" json:"used,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InfoReply_MemoryInfo) Reset() {
	*x = InfoReply_MemoryInfo{}
	mi := &file_agent_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InfoReply_MemoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoReply_MemoryInfo) ProtoMessage() {}

func (x *InfoReply_MemoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoReply_MemoryInfo.ProtoReflect.Descriptor instead.
func (*InfoReply_MemoryInfo) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{1, 0}
}

func (x *InfoReply_MemoryInfo) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *InfoReply_MemoryInfo) GetFree() uint64 {
	if x != nil {
		return x.Free
	}
	return 0
}

func (x *InfoReply_MemoryInfo) GetUsed() uint64 {
	if x != nil {
		return x.Used
	}
	return 0
}

type InfoReply_DiskInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Device        string                 `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Mount         string                 `protobuf:"bytes,2,opt,name=mount,proto3" json:"mount,omitempty"`
	FsType        string                 `protobuf:"bytes,3,opt,name=fsType,proto3" json:"fsType,omitempty"`
	Size          uint64                 `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	Used          uint64                 `protobuf:"varint,5,opt,name=used,proto3" json:"used,omitempty"`
	Free          uint64                 `protobuf:"varint,6,opt,name=free,proto3" json:"free,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InfoReply_DiskInfo) Reset() {
	*x = InfoReply_DiskInfo{}
	mi := &file_agent_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InfoReply_DiskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoReply_DiskInfo) ProtoMessage() {}

func (x *InfoReply_DiskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoReply_DiskInfo.ProtoReflect.Descriptor instead.
func (*InfoReply_DiskInfo) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{1, 1}
}

func (x *InfoReply_DiskInfo) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *InfoReply_DiskInfo) GetMount() string {
	if x != nil {
		return x.Mount
	}
	return ""
}

func (x *InfoReply_DiskInfo) GetFsType() string {
	if x != nil {
		return x.FsType
	}
	return ""
}

func (x *InfoReply_DiskInfo) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *InfoReply_DiskInfo) GetUsed() uint64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *InfoReply_DiskInfo) GetFree() uint64 {
	if x != nil {
		return x.Free
	}
	return 0
}

var File_agent_proto protoreflect.FileDescriptor

var file_agent_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x63,
	0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x51, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x1a, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x42, 0x0a, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9a, 0x04, 0x0a, 0x09, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a,
	0x09, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x70,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x73, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x1a, 0x4a, 0x0a, 0x0a, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x66, 0x72,
	0x65, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x1a, 0x8c, 0x01, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x66, 0x72, 0x65, 0x65, 0x22, 0x37, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x5f,
	0x0a, 0x0a, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x63, 0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22,
	0x63, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x16, 0x0a, 0x05, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x05, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x22, 0x36, 0x0a, 0x0c, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x22, 0xad, 0x01, 0x0a,
	0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x35, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2d,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x53, 0x69, 0x7a, 0x65, 0x48, 0x00, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a,
	0x03, 0x65, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x03, 0x65, 0x6f,
	0x66, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x56, 0x0a, 0x08,
	0x52, 0x75, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x69, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x74,
	0x64, 0x65, 0x72, 0x72, 0x22, 0x93, 0x01, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x65, 0x78, 0x69, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x65, 0x78,
	0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74,
	0x12, 0x18, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x12, 0x22, 0x0a, 0x0b, 0x65, 0x73,
	0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x0b, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x42, 0x0a,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x0d, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x46, 0x53, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x61, 0x72, 0x6c,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x22, 0x40,
	0x0a, 0x0c, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30,
	0x0a, 0x06, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x46, 0x53, 0x52, 0x06, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x22, 0x68, 0x0a, 0x12, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x46,
	0x53, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x0a,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x0a, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x35, 0x0a, 0x06, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x61, 0x6b, 0x65,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x69, 0x72, 0x74, 0x69,
	0x6f, 0x46, 0x53, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x06, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x12, 0x16, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0xa0, 0x03, 0x0a, 0x05, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x52, 0x65,
	0x73, 0x69, 0x7a, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x16, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73,
	0x69, 0x7a, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x34, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x37,
	0x0a, 0x08, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x13, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x52,
	0x75, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x31, 0x0a, 0x03, 0x52, 0x75, 0x6e, 0x12, 0x15,
	0x2e, 0x63, 0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x13, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x44, 0x0a, 0x07, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01,
	0x12, 0x37, 0x0a, 0x05, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x2e, 0x63, 0x61, 0x6b, 0x65,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x38, 0x0a, 0x06, 0x55, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x17, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x63,
	0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x42, 0x48, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6c, 0x64, 0x75, 0x6e,
	0x65, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x42,
	0x09, 0x63, 0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x01, 0x5a, 0x13, 0x6c, 0x69,
	0x6e, 0x75, 0x78, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0xa2, 0x02, 0x09, 0x63, 0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_agent_proto_rawDescOnce sync.Once
	file_agent_proto_rawDescData = file_agent_proto_rawDesc
)

func file_agent_proto_rawDescGZIP() []byte {
	file_agent_proto_rawDescOnce.Do(func() {
		file_agent_proto_rawDescData = protoimpl.X.CompressGZIP(file_agent_proto_rawDescData)
	})
	return file_agent_proto_rawDescData
}

var file_agent_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_agent_proto_goTypes = []any{
	(*ResizeReply)(nil),          // 0: cakeagent.ResizeReply
	(*InfoReply)(nil),            // 1: cakeagent.InfoReply
	(*Command)(nil),              // 2: cakeagent.Command
	(*RunCommand)(nil),           // 3: cakeagent.RunCommand
	(*ExecuteCommand)(nil),       // 4: cakeagent.ExecuteCommand
	(*TerminalSize)(nil),         // 5: cakeagent.TerminalSize
	(*ExecuteRequest)(nil),       // 6: cakeagent.ExecuteRequest
	(*RunReply)(nil),             // 7: cakeagent.RunReply
	(*ExecuteResponse)(nil),      // 8: cakeagent.ExecuteResponse
	(*MountVirtioFS)(nil),        // 9: cakeagent.MountVirtioFS
	(*MountRequest)(nil),         // 10: cakeagent.MountRequest
	(*MountVirtioFSReply)(nil),   // 11: cakeagent.MountVirtioFSReply
	(*MountReply)(nil),           // 12: cakeagent.MountReply
	(*InfoReply_MemoryInfo)(nil), // 13: cakeagent.InfoReply.MemoryInfo
	(*InfoReply_DiskInfo)(nil),   // 14: cakeagent.InfoReply.DiskInfo
	(*emptypb.Empty)(nil),        // 15: google.protobuf.Empty
}
var file_agent_proto_depIdxs = []int32{
	13, // 0: cakeagent.InfoReply.memory:type_name -> cakeagent.InfoReply.MemoryInfo
	14, // 1: cakeagent.InfoReply.diskInfos:type_name -> cakeagent.InfoReply.DiskInfo
	2,  // 2: cakeagent.RunCommand.command:type_name -> cakeagent.Command
	2,  // 3: cakeagent.ExecuteCommand.command:type_name -> cakeagent.Command
	4,  // 4: cakeagent.ExecuteRequest.command:type_name -> cakeagent.ExecuteCommand
	5,  // 5: cakeagent.ExecuteRequest.size:type_name -> cakeagent.TerminalSize
	9,  // 6: cakeagent.MountRequest.mounts:type_name -> cakeagent.MountVirtioFS
	11, // 7: cakeagent.MountReply.mounts:type_name -> cakeagent.MountVirtioFSReply
	15, // 8: cakeagent.Agent.ResizeDisk:input_type -> google.protobuf.Empty
	15, // 9: cakeagent.Agent.Info:input_type -> google.protobuf.Empty
	15, // 10: cakeagent.Agent.Shutdown:input_type -> google.protobuf.Empty
	3,  // 11: cakeagent.Agent.Run:input_type -> cakeagent.RunCommand
	6,  // 12: cakeagent.Agent.Execute:input_type -> cakeagent.ExecuteRequest
	10, // 13: cakeagent.Agent.Mount:input_type -> cakeagent.MountRequest
	10, // 14: cakeagent.Agent.Umount:input_type -> cakeagent.MountRequest
	0,  // 15: cakeagent.Agent.ResizeDisk:output_type -> cakeagent.ResizeReply
	1,  // 16: cakeagent.Agent.Info:output_type -> cakeagent.InfoReply
	7,  // 17: cakeagent.Agent.Shutdown:output_type -> cakeagent.RunReply
	7,  // 18: cakeagent.Agent.Run:output_type -> cakeagent.RunReply
	8,  // 19: cakeagent.Agent.Execute:output_type -> cakeagent.ExecuteResponse
	12, // 20: cakeagent.Agent.Mount:output_type -> cakeagent.MountReply
	12, // 21: cakeagent.Agent.Umount:output_type -> cakeagent.MountReply
	15, // [15:22] is the sub-list for method output_type
	8,  // [8:15] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_agent_proto_init() }
func file_agent_proto_init() {
	if File_agent_proto != nil {
		return
	}
	file_agent_proto_msgTypes[0].OneofWrappers = []any{
		(*ResizeReply_Success)(nil),
		(*ResizeReply_Failure)(nil),
	}
	file_agent_proto_msgTypes[3].OneofWrappers = []any{}
	file_agent_proto_msgTypes[4].OneofWrappers = []any{
		(*ExecuteCommand_Command)(nil),
		(*ExecuteCommand_Shell)(nil),
	}
	file_agent_proto_msgTypes[6].OneofWrappers = []any{
		(*ExecuteRequest_Command)(nil),
		(*ExecuteRequest_Input)(nil),
		(*ExecuteRequest_Size)(nil),
		(*ExecuteRequest_Eof)(nil),
	}
	file_agent_proto_msgTypes[8].OneofWrappers = []any{
		(*ExecuteResponse_ExitCode)(nil),
		(*ExecuteResponse_Stdout)(nil),
		(*ExecuteResponse_Stderr)(nil),
		(*ExecuteResponse_Established)(nil),
	}
	file_agent_proto_msgTypes[11].OneofWrappers = []any{
		(*MountVirtioFSReply_Error)(nil),
		(*MountVirtioFSReply_Success)(nil),
	}
	file_agent_proto_msgTypes[12].OneofWrappers = []any{
		(*MountReply_Error)(nil),
		(*MountReply_Success)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_agent_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_agent_proto_goTypes,
		DependencyIndexes: file_agent_proto_depIdxs,
		MessageInfos:      file_agent_proto_msgTypes,
	}.Build()
	File_agent_proto = out.File
	file_agent_proto_rawDesc = nil
	file_agent_proto_goTypes = nil
	file_agent_proto_depIdxs = nil
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.29.3
// source: agent.proto

package cakeagent

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CakeAgent_TunnelMessage_TunnelProtocol int32

const (
	CakeAgent_TunnelMessage_TCP CakeAgent_TunnelMessage_TunnelProtocol = 0
	CakeAgent_TunnelMessage_UDP CakeAgent_TunnelMessage_TunnelProtocol = 1
)

// Enum value maps for CakeAgent_TunnelMessage_TunnelProtocol.
var (
	CakeAgent_TunnelMessage_TunnelProtocol_name = map[int32]string{
		0: "TCP",
		1: "UDP",
	}
	CakeAgent_TunnelMessage_TunnelProtocol_value = map[string]int32{
		"TCP": 0,
		"UDP": 1,
	}
)

func (x CakeAgent_TunnelMessage_TunnelProtocol) Enum() *CakeAgent_TunnelMessage_TunnelProtocol {
	p := new(CakeAgent_TunnelMessage_TunnelProtocol)
	*p = x
	return p
}

func (x CakeAgent_TunnelMessage_TunnelProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CakeAgent_TunnelMessage_TunnelProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_agent_proto_enumTypes[0].Descriptor()
}

func (CakeAgent_TunnelMessage_TunnelProtocol) Type() protoreflect.EnumType {
	return &file_agent_proto_enumTypes[0]
}

func (x CakeAgent_TunnelMessage_TunnelProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CakeAgent_TunnelMessage_TunnelProtocol.Descriptor instead.
func (CakeAgent_TunnelMessage_TunnelProtocol) EnumDescriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{0, 0, 0}
}

type CakeAgent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CakeAgent) Reset() {
	*x = CakeAgent{}
	mi := &file_agent_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CakeAgent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CakeAgent) ProtoMessage() {}

func (x *CakeAgent) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CakeAgent.ProtoReflect.Descriptor instead.
func (*CakeAgent) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{0}
}

type CakeAgent_TunnelMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Message:
	//
	//	*CakeAgent_TunnelMessage_Connect
	//	*CakeAgent_TunnelMessage_Datas
	//	*CakeAgent_TunnelMessage_Eof
	//	*CakeAgent_TunnelMessage_Error
	Message       isCakeAgent_TunnelMessage_Message `protobuf_oneof:"message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CakeAgent_TunnelMessage) Reset() {
	*x = CakeAgent_TunnelMessage{}
	mi := &file_agent_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CakeAgent_TunnelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CakeAgent_TunnelMessage) ProtoMessage() {}

func (x *CakeAgent_TunnelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CakeAgent_TunnelMessage.ProtoReflect.Descriptor instead.
func (*CakeAgent_TunnelMessage) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CakeAgent_TunnelMessage) GetMessage() isCakeAgent_TunnelMessage_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *CakeAgent_TunnelMessage) GetConnect() *CakeAgent_TunnelMessage_TunnelMessageConnect {
	if x != nil {
		if x, ok := x.Message.(*CakeAgent_TunnelMessage_Connect); ok {
			return x.Connect
		}
	}
	return nil
}

func (x *CakeAgent_TunnelMessage) GetDatas() []byte {
	if x != nil {
		if x, ok := x.Message.(*CakeAgent_TunnelMessage_Datas); ok {
			return x.Datas
		}
	}
	return nil
}

func (x *CakeAgent_TunnelMessage) GetEof() bool {
	if x != nil {
		if x, ok := x.Message.(*CakeAgent_TunnelMessage_Eof); ok {
			return x.Eof
		}
	}
	return false
}

func (x *CakeAgent_TunnelMessage) GetError() string {
	if x != nil {
		if x, ok := x.Message.(*CakeAgent_TunnelMessage_Error); ok {
			return x.Error
		}
	}
	return ""
}

type isCakeAgent_TunnelMessage_Message interface {
	isCakeAgent_TunnelMessage_Message()
}

type CakeAgent_TunnelMessage_Connect struct {
	Connect *CakeAgent_TunnelMessage_TunnelMessageConnect `protobuf:"bytes,1,opt,name=connect,proto3,oneof"`
}

type CakeAgent_TunnelMessage_Datas struct {
	Datas []byte `protobuf:"bytes,2,opt,name=datas,proto3,oneof"`
}

type CakeAgent_TunnelMessage_Eof struct {
	Eof bool `protobuf:"varint,3,opt,name=eof,proto3,oneof"` //end of file
}

type CakeAgent_TunnelMessage_Error struct {
	Error string `protobuf:"bytes,4,opt,name=error,proto3,oneof"` //error message
}

func (*CakeAgent_TunnelMessage_Connect) isCakeAgent_TunnelMessage_Message() {}

func (*CakeAgent_TunnelMessage_Datas) isCakeAgent_TunnelMessage_Message() {}

func (*CakeAgent_TunnelMessage_Eof) isCakeAgent_TunnelMessage_Message() {}

func (*CakeAgent_TunnelMessage_Error) isCakeAgent_TunnelMessage_Message() {}

type CakeAgent_Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CakeAgent_Empty) Reset() {
	*x = CakeAgent_Empty{}
	mi := &file_agent_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CakeAgent_Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CakeAgent_Empty) ProtoMessage() {}

func (x *CakeAgent_Empty) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CakeAgent_Empty.ProtoReflect.Descriptor instead.
func (*CakeAgent_Empty) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{0, 1}
}

type CakeAgent_ResizeReply struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*CakeAgent_ResizeReply_Success
	//	*CakeAgent_ResizeReply_Failure
	Response      isCakeAgent_ResizeReply_Response `protobuf_oneof:"Response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CakeAgent_ResizeReply) Reset() {
	*x = CakeAgent_ResizeReply{}
	mi := &file_agent_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CakeAgent_ResizeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CakeAgent_ResizeReply) ProtoMessage() {}

func (x *CakeAgent_ResizeReply) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CakeAgent_ResizeReply.ProtoReflect.Descriptor instead.
func (*CakeAgent_ResizeReply) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{0, 2}
}

func (x *CakeAgent_ResizeReply) GetResponse() isCakeAgent_ResizeReply_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *CakeAgent_ResizeReply) GetSuccess() bool {
	if x != nil {
		if x, ok := x.Response.(*CakeAgent_ResizeReply_Success); ok {
			return x.Success
		}
	}
	return false
}

func (x *CakeAgent_ResizeReply) GetFailure() string {
	if x != nil {
		if x, ok := x.Response.(*CakeAgent_ResizeReply_Failure); ok {
			return x.Failure
		}
	}
	return ""
}

type isCakeAgent_ResizeReply_Response interface {
	isCakeAgent_ResizeReply_Response()
}

type CakeAgent_ResizeReply_Success struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3,oneof"`
}

type CakeAgent_ResizeReply_Failure struct {
	Failure string `protobuf:"bytes,2,opt,name=failure,proto3,oneof"`
}

func (*CakeAgent_ResizeReply_Success) isCakeAgent_ResizeReply_Response() {}

func (*CakeAgent_ResizeReply_Failure) isCakeAgent_ResizeReply_Response() {}

type CakeAgent_InfoReply struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Version       string                          `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Uptime        uint64                          `protobuf:"varint,2,opt,name=uptime,proto3" json:"uptime,omitempty"`
	Memory        *CakeAgent_InfoReply_MemoryInfo `protobuf:"bytes,3,opt,name=memory,proto3" json:"memory,omitempty"`
	CpuCount      int32                           `protobuf:"varint,4,opt,name=cpuCount,proto3" json:"cpuCount,omitempty"`
	DiskInfos     []*CakeAgent_InfoReply_DiskInfo `protobuf:"bytes,5,rep,name=diskInfos,proto3" json:"diskInfos,omitempty"`
	Ipaddresses   []string                        `protobuf:"bytes,6,rep,name=ipaddresses,proto3" json:"ipaddresses,omitempty"`
	Osname        string                          `protobuf:"bytes,7,opt,name=osname,proto3" json:"osname,omitempty"`
	Hostname      string                          `protobuf:"bytes,8,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Release       string                          `protobuf:"bytes,9,opt,name=release,proto3" json:"release,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CakeAgent_InfoReply) Reset() {
	*x = CakeAgent_InfoReply{}
	mi := &file_agent_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CakeAgent_InfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CakeAgent_InfoReply) ProtoMessage() {}

func (x *CakeAgent_InfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CakeAgent_InfoReply.ProtoReflect.Descriptor instead.
func (*CakeAgent_InfoReply) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{0, 3}
}

func (x *CakeAgent_InfoReply) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CakeAgent_InfoReply) GetUptime() uint64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *CakeAgent_InfoReply) GetMemory() *CakeAgent_InfoReply_MemoryInfo {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *CakeAgent_InfoReply) GetCpuCount() int32 {
	if x != nil {
		return x.CpuCount
	}
	return 0
}

func (x *CakeAgent_InfoReply) GetDiskInfos() []*CakeAgent_InfoReply_DiskInfo {
	if x != nil {
		return x.DiskInfos
	}
	return nil
}

func (x *CakeAgent_InfoReply) GetIpaddresses() []string {
	if x != nil {
		return x.Ipaddresses
	}
	return nil
}

func (x *CakeAgent_InfoReply) GetOsname() string {
	if x != nil {
		return x.Osname
	}
	return ""
}

func (x *CakeAgent_InfoReply) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *CakeAgent_InfoReply) GetRelease() string {
	if x != nil {
		return x.Release
	}
	return ""
}

type CakeAgent_RunCommand struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Command       *CakeAgent_RunCommand_Command `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Input         []byte                        `protobuf:"bytes,2,opt,name=input,proto3,oneof" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CakeAgent_RunCommand) Reset() {
	*x = CakeAgent_RunCommand{}
	mi := &file_agent_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CakeAgent_RunCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CakeAgent_RunCommand) ProtoMessage() {}

func (x *CakeAgent_RunCommand) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CakeAgent_RunCommand.ProtoReflect.Descriptor instead.
func (*CakeAgent_RunCommand) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{0, 4}
}

func (x *CakeAgent_RunCommand) GetCommand() *CakeAgent_RunCommand_Command {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *CakeAgent_RunCommand) GetInput() []byte {
	if x != nil {
		return x.Input
	}
	return nil
}

type CakeAgent_ExecuteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Request:
	//
	//	*CakeAgent_ExecuteRequest_Command
	//	*CakeAgent_ExecuteRequest_Input
	//	*CakeAgent_ExecuteRequest_Size
	//	*CakeAgent_ExecuteRequest_Eof
	Request       isCakeAgent_ExecuteRequest_Request `protobuf_oneof:"request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CakeAgent_ExecuteRequest) Reset() {
	*x = CakeAgent_ExecuteRequest{}
	mi := &file_agent_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CakeAgent_ExecuteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CakeAgent_ExecuteRequest) ProtoMessage() {}

func (x *CakeAgent_ExecuteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CakeAgent_ExecuteRequest.ProtoReflect.Descriptor instead.
func (*CakeAgent_ExecuteRequest) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{0, 5}
}

func (x *CakeAgent_ExecuteRequest) GetRequest() isCakeAgent_ExecuteRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *CakeAgent_ExecuteRequest) GetCommand() *CakeAgent_ExecuteRequest_ExecuteCommand {
	if x != nil {
		if x, ok := x.Request.(*CakeAgent_ExecuteRequest_Command); ok {
			return x.Command
		}
	}
	return nil
}

func (x *CakeAgent_ExecuteRequest) GetInput() []byte {
	if x != nil {
		if x, ok := x.Request.(*CakeAgent_ExecuteRequest_Input); ok {
			return x.Input
		}
	}
	return nil
}

func (x *CakeAgent_ExecuteRequest) GetSize() *CakeAgent_ExecuteRequest_TerminalSize {
	if x != nil {
		if x, ok := x.Request.(*CakeAgent_ExecuteRequest_Size); ok {
			return x.Size
		}
	}
	return nil
}

func (x *CakeAgent_ExecuteRequest) GetEof() bool {
	if x != nil {
		if x, ok := x.Request.(*CakeAgent_ExecuteRequest_Eof); ok {
			return x.Eof
		}
	}
	return false
}

type isCakeAgent_ExecuteRequest_Request interface {
	isCakeAgent_ExecuteRequest_Request()
}

type CakeAgent_ExecuteRequest_Command struct {
	Command *CakeAgent_ExecuteRequest_ExecuteCommand `protobuf:"bytes,1,opt,name=command,proto3,oneof"`
}

type CakeAgent_ExecuteRequest_Input struct {
	Input []byte `protobuf:"bytes,2,opt,name=input,proto3,oneof"`
}

type CakeAgent_ExecuteRequest_Size struct {
	Size *CakeAgent_ExecuteRequest_TerminalSize `protobuf:"bytes,3,opt,name=size,proto3,oneof"`
}

type CakeAgent_ExecuteRequest_Eof struct {
	Eof bool `protobuf:"varint,4,opt,name=eof,proto3,oneof"`
}

func (*CakeAgent_ExecuteRequest_Command) isCakeAgent_ExecuteRequest_Request() {}

func (*CakeAgent_ExecuteRequest_Input) isCakeAgent_ExecuteRequest_Request() {}

func (*CakeAgent_ExecuteRequest_Size) isCakeAgent_ExecuteRequest_Request() {}

func (*CakeAgent_ExecuteRequest_Eof) isCakeAgent_ExecuteRequest_Request() {}

type CakeAgent_RunReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ExitCode      int32                  `protobuf:"varint,1,opt,name=exitCode,proto3" json:"exitCode,omitempty"`
	Stdout        []byte                 `protobuf:"bytes,2,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr        []byte                 `protobuf:"bytes,3,opt,name=stderr,proto3" json:"stderr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CakeAgent_RunReply) Reset() {
	*x = CakeAgent_RunReply{}
	mi := &file_agent_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CakeAgent_RunReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CakeAgent_RunReply) ProtoMessage() {}

func (x *CakeAgent_RunReply) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CakeAgent_RunReply.ProtoReflect.Descriptor instead.
func (*CakeAgent_RunReply) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{0, 6}
}

func (x *CakeAgent_RunReply) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *CakeAgent_RunReply) GetStdout() []byte {
	if x != nil {
		return x.Stdout
	}
	return nil
}

func (x *CakeAgent_RunReply) GetStderr() []byte {
	if x != nil {
		return x.Stderr
	}
	return nil
}

type CakeAgent_ExecuteResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*CakeAgent_ExecuteResponse_ExitCode
	//	*CakeAgent_ExecuteResponse_Stdout
	//	*CakeAgent_ExecuteResponse_Stderr
	//	*CakeAgent_ExecuteResponse_Established
	Response      isCakeAgent_ExecuteResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CakeAgent_ExecuteResponse) Reset() {
	*x = CakeAgent_ExecuteResponse{}
	mi := &file_agent_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CakeAgent_ExecuteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CakeAgent_ExecuteResponse) ProtoMessage() {}

func (x *CakeAgent_ExecuteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CakeAgent_ExecuteResponse.ProtoReflect.Descriptor instead.
func (*CakeAgent_ExecuteResponse) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{0, 7}
}

func (x *CakeAgent_ExecuteResponse) GetResponse() isCakeAgent_ExecuteResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *CakeAgent_ExecuteResponse) GetExitCode() int32 {
	if x != nil {
		if x, ok := x.Response.(*CakeAgent_ExecuteResponse_ExitCode); ok {
			return x.ExitCode
		}
	}
	return 0
}

func (x *CakeAgent_ExecuteResponse) GetStdout() []byte {
	if x != nil {
		if x, ok := x.Response.(*CakeAgent_ExecuteResponse_Stdout); ok {
			return x.Stdout
		}
	}
	return nil
}

func (x *CakeAgent_ExecuteResponse) GetStderr() []byte {
	if x != nil {
		if x, ok := x.Response.(*CakeAgent_ExecuteResponse_Stderr); ok {
			return x.Stderr
		}
	}
	return nil
}

func (x *CakeAgent_ExecuteResponse) GetEstablished() bool {
	if x != nil {
		if x, ok := x.Response.(*CakeAgent_ExecuteResponse_Established); ok {
			return x.Established
		}
	}
	return false
}

type isCakeAgent_ExecuteResponse_Response interface {
	isCakeAgent_ExecuteResponse_Response()
}

type CakeAgent_ExecuteResponse_ExitCode struct {
	ExitCode int32 `protobuf:"varint,1,opt,name=exitCode,proto3,oneof"`
}

type CakeAgent_ExecuteResponse_Stdout struct {
	Stdout []byte `protobuf:"bytes,2,opt,name=stdout,proto3,oneof"`
}

type CakeAgent_ExecuteResponse_Stderr struct {
	Stderr []byte `protobuf:"bytes,3,opt,name=stderr,proto3,oneof"`
}

type CakeAgent_ExecuteResponse_Established struct {
	Established bool `protobuf:"varint,4,opt,name=established,proto3,oneof"`
}

func (*CakeAgent_ExecuteResponse_ExitCode) isCakeAgent_ExecuteResponse_Response() {}

func (*CakeAgent_ExecuteResponse_Stdout) isCakeAgent_ExecuteResponse_Response() {}

func (*CakeAgent_ExecuteResponse_Stderr) isCakeAgent_ExecuteResponse_Response() {}

func (*CakeAgent_ExecuteResponse_Established) isCakeAgent_ExecuteResponse_Response() {}

type CakeAgent_MountRequest struct {
	state         protoimpl.MessageState                  `protogen:"open.v1"`
	Mounts        []*CakeAgent_MountRequest_MountVirtioFS `protobuf:"bytes,1,rep,name=mounts,proto3" json:"mounts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CakeAgent_MountRequest) Reset() {
	*x = CakeAgent_MountRequest{}
	mi := &file_agent_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CakeAgent_MountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CakeAgent_MountRequest) ProtoMessage() {}

func (x *CakeAgent_MountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CakeAgent_MountRequest.ProtoReflect.Descriptor instead.
func (*CakeAgent_MountRequest) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{0, 8}
}

func (x *CakeAgent_MountRequest) GetMounts() []*CakeAgent_MountRequest_MountVirtioFS {
	if x != nil {
		return x.Mounts
	}
	return nil
}

type CakeAgent_MountReply struct {
	state  protoimpl.MessageState                     `protogen:"open.v1"`
	Mounts []*CakeAgent_MountReply_MountVirtioFSReply `protobuf:"bytes,1,rep,name=mounts,proto3" json:"mounts,omitempty"`
	// Types that are valid to be assigned to Response:
	//
	//	*CakeAgent_MountReply_Error
	//	*CakeAgent_MountReply_Success
	Response      isCakeAgent_MountReply_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CakeAgent_MountReply) Reset() {
	*x = CakeAgent_MountReply{}
	mi := &file_agent_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CakeAgent_MountReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CakeAgent_MountReply) ProtoMessage() {}

func (x *CakeAgent_MountReply) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CakeAgent_MountReply.ProtoReflect.Descriptor instead.
func (*CakeAgent_MountReply) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{0, 9}
}

func (x *CakeAgent_MountReply) GetMounts() []*CakeAgent_MountReply_MountVirtioFSReply {
	if x != nil {
		return x.Mounts
	}
	return nil
}

func (x *CakeAgent_MountReply) GetResponse() isCakeAgent_MountReply_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *CakeAgent_MountReply) GetError() string {
	if x != nil {
		if x, ok := x.Response.(*CakeAgent_MountReply_Error); ok {
			return x.Error
		}
	}
	return ""
}

func (x *CakeAgent_MountReply) GetSuccess() bool {
	if x != nil {
		if x, ok := x.Response.(*CakeAgent_MountReply_Success); ok {
			return x.Success
		}
	}
	return false
}

type isCakeAgent_MountReply_Response interface {
	isCakeAgent_MountReply_Response()
}

type CakeAgent_MountReply_Error struct {
	Error string `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

type CakeAgent_MountReply_Success struct {
	Success bool `protobuf:"varint,3,opt,name=success,proto3,oneof"`
}

func (*CakeAgent_MountReply_Error) isCakeAgent_MountReply_Response() {}

func (*CakeAgent_MountReply_Success) isCakeAgent_MountReply_Response() {}

type CakeAgent_TunnelMessage_TunnelMessageConnect struct {
	state         protoimpl.MessageState                 `protogen:"open.v1"`
	Id            string                                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Protocol      CakeAgent_TunnelMessage_TunnelProtocol `protobuf:"varint,2,opt,name=protocol,proto3,enum=cakeagent.CakeAgent_TunnelMessage_TunnelProtocol" json:"protocol,omitempty"` //tcp, udp
	GuestAddress  string                                 `protobuf:"bytes,3,opt,name=guestAddress,proto3" json:"guestAddress,omitempty"`                                                //ip address of the guest
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CakeAgent_TunnelMessage_TunnelMessageConnect) Reset() {
	*x = CakeAgent_TunnelMessage_TunnelMessageConnect{}
	mi := &file_agent_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CakeAgent_TunnelMessage_TunnelMessageConnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CakeAgent_TunnelMessage_TunnelMessageConnect) ProtoMessage() {}

func (x *CakeAgent_TunnelMessage_TunnelMessageConnect) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CakeAgent_TunnelMessage_TunnelMessageConnect.ProtoReflect.Descriptor instead.
func (*CakeAgent_TunnelMessage_TunnelMessageConnect) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *CakeAgent_TunnelMessage_TunnelMessageConnect) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CakeAgent_TunnelMessage_TunnelMessageConnect) GetProtocol() CakeAgent_TunnelMessage_TunnelProtocol {
	if x != nil {
		return x.Protocol
	}
	return CakeAgent_TunnelMessage_TCP
}

func (x *CakeAgent_TunnelMessage_TunnelMessageConnect) GetGuestAddress() string {
	if x != nil {
		return x.GuestAddress
	}
	return ""
}

type CakeAgent_InfoReply_MemoryInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         uint64                 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Free          uint64                 `protobuf:"varint,2,opt,name=free,proto3" json:"free,omitempty"`
	Used          uint64                 `protobuf:"varint,3,opt,name=used,proto3" json:"used,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CakeAgent_InfoReply_MemoryInfo) Reset() {
	*x = CakeAgent_InfoReply_MemoryInfo{}
	mi := &file_agent_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CakeAgent_InfoReply_MemoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CakeAgent_InfoReply_MemoryInfo) ProtoMessage() {}

func (x *CakeAgent_InfoReply_MemoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CakeAgent_InfoReply_MemoryInfo.ProtoReflect.Descriptor instead.
func (*CakeAgent_InfoReply_MemoryInfo) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *CakeAgent_InfoReply_MemoryInfo) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CakeAgent_InfoReply_MemoryInfo) GetFree() uint64 {
	if x != nil {
		return x.Free
	}
	return 0
}

func (x *CakeAgent_InfoReply_MemoryInfo) GetUsed() uint64 {
	if x != nil {
		return x.Used
	}
	return 0
}

type CakeAgent_InfoReply_DiskInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Device        string                 `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Mount         string                 `protobuf:"bytes,2,opt,name=mount,proto3" json:"mount,omitempty"`
	FsType        string                 `protobuf:"bytes,3,opt,name=fsType,proto3" json:"fsType,omitempty"`
	Size          uint64                 `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	Used          uint64                 `protobuf:"varint,5,opt,name=used,proto3" json:"used,omitempty"`
	Free          uint64                 `protobuf:"varint,6,opt,name=free,proto3" json:"free,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CakeAgent_InfoReply_DiskInfo) Reset() {
	*x = CakeAgent_InfoReply_DiskInfo{}
	mi := &file_agent_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CakeAgent_InfoReply_DiskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CakeAgent_InfoReply_DiskInfo) ProtoMessage() {}

func (x *CakeAgent_InfoReply_DiskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CakeAgent_InfoReply_DiskInfo.ProtoReflect.Descriptor instead.
func (*CakeAgent_InfoReply_DiskInfo) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{0, 3, 1}
}

func (x *CakeAgent_InfoReply_DiskInfo) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *CakeAgent_InfoReply_DiskInfo) GetMount() string {
	if x != nil {
		return x.Mount
	}
	return ""
}

func (x *CakeAgent_InfoReply_DiskInfo) GetFsType() string {
	if x != nil {
		return x.FsType
	}
	return ""
}

func (x *CakeAgent_InfoReply_DiskInfo) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CakeAgent_InfoReply_DiskInfo) GetUsed() uint64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *CakeAgent_InfoReply_DiskInfo) GetFree() uint64 {
	if x != nil {
		return x.Free
	}
	return 0
}

type CakeAgent_RunCommand_Command struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Command       string                 `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Args          []string               `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CakeAgent_RunCommand_Command) Reset() {
	*x = CakeAgent_RunCommand_Command{}
	mi := &file_agent_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CakeAgent_RunCommand_Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CakeAgent_RunCommand_Command) ProtoMessage() {}

func (x *CakeAgent_RunCommand_Command) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CakeAgent_RunCommand_Command.ProtoReflect.Descriptor instead.
func (*CakeAgent_RunCommand_Command) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *CakeAgent_RunCommand_Command) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *CakeAgent_RunCommand_Command) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

type CakeAgent_ExecuteRequest_ExecuteCommand struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Execute:
	//
	//	*CakeAgent_ExecuteRequest_ExecuteCommand_Command_
	//	*CakeAgent_ExecuteRequest_ExecuteCommand_Shell
	Execute       isCakeAgent_ExecuteRequest_ExecuteCommand_Execute `protobuf_oneof:"execute"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CakeAgent_ExecuteRequest_ExecuteCommand) Reset() {
	*x = CakeAgent_ExecuteRequest_ExecuteCommand{}
	mi := &file_agent_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CakeAgent_ExecuteRequest_ExecuteCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CakeAgent_ExecuteRequest_ExecuteCommand) ProtoMessage() {}

func (x *CakeAgent_ExecuteRequest_ExecuteCommand) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CakeAgent_ExecuteRequest_ExecuteCommand.ProtoReflect.Descriptor instead.
func (*CakeAgent_ExecuteRequest_ExecuteCommand) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{0, 5, 0}
}

func (x *CakeAgent_ExecuteRequest_ExecuteCommand) GetExecute() isCakeAgent_ExecuteRequest_ExecuteCommand_Execute {
	if x != nil {
		return x.Execute
	}
	return nil
}

func (x *CakeAgent_ExecuteRequest_ExecuteCommand) GetCommand() *CakeAgent_ExecuteRequest_ExecuteCommand_Command {
	if x != nil {
		if x, ok := x.Execute.(*CakeAgent_ExecuteRequest_ExecuteCommand_Command_); ok {
			return x.Command
		}
	}
	return nil
}

func (x *CakeAgent_ExecuteRequest_ExecuteCommand) GetShell() bool {
	if x != nil {
		if x, ok := x.Execute.(*CakeAgent_ExecuteRequest_ExecuteCommand_Shell); ok {
			return x.Shell
		}
	}
	return false
}

type isCakeAgent_ExecuteRequest_ExecuteCommand_Execute interface {
	isCakeAgent_ExecuteRequest_ExecuteCommand_Execute()
}

type CakeAgent_ExecuteRequest_ExecuteCommand_Command_ struct {
	Command *CakeAgent_ExecuteRequest_ExecuteCommand_Command `protobuf:"bytes,1,opt,name=command,proto3,oneof"`
}

type CakeAgent_ExecuteRequest_ExecuteCommand_Shell struct {
	Shell bool `protobuf:"varint,2,opt,name=shell,proto3,oneof"`
}

func (*CakeAgent_ExecuteRequest_ExecuteCommand_Command_) isCakeAgent_ExecuteRequest_ExecuteCommand_Execute() {
}

func (*CakeAgent_ExecuteRequest_ExecuteCommand_Shell) isCakeAgent_ExecuteRequest_ExecuteCommand_Execute() {
}

type CakeAgent_ExecuteRequest_TerminalSize struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rows          int32                  `protobuf:"varint,1,opt,name=rows,proto3" json:"rows,omitempty"`
	Cols          int32                  `protobuf:"varint,2,opt,name=cols,proto3" json:"cols,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CakeAgent_ExecuteRequest_TerminalSize) Reset() {
	*x = CakeAgent_ExecuteRequest_TerminalSize{}
	mi := &file_agent_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CakeAgent_ExecuteRequest_TerminalSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CakeAgent_ExecuteRequest_TerminalSize) ProtoMessage() {}

func (x *CakeAgent_ExecuteRequest_TerminalSize) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CakeAgent_ExecuteRequest_TerminalSize.ProtoReflect.Descriptor instead.
func (*CakeAgent_ExecuteRequest_TerminalSize) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{0, 5, 1}
}

func (x *CakeAgent_ExecuteRequest_TerminalSize) GetRows() int32 {
	if x != nil {
		return x.Rows
	}
	return 0
}

func (x *CakeAgent_ExecuteRequest_TerminalSize) GetCols() int32 {
	if x != nil {
		return x.Cols
	}
	return 0
}

type CakeAgent_ExecuteRequest_ExecuteCommand_Command struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Command       string                 `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Args          []string               `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CakeAgent_ExecuteRequest_ExecuteCommand_Command) Reset() {
	*x = CakeAgent_ExecuteRequest_ExecuteCommand_Command{}
	mi := &file_agent_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CakeAgent_ExecuteRequest_ExecuteCommand_Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CakeAgent_ExecuteRequest_ExecuteCommand_Command) ProtoMessage() {}

func (x *CakeAgent_ExecuteRequest_ExecuteCommand_Command) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CakeAgent_ExecuteRequest_ExecuteCommand_Command.ProtoReflect.Descriptor instead.
func (*CakeAgent_ExecuteRequest_ExecuteCommand_Command) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{0, 5, 0, 0}
}

func (x *CakeAgent_ExecuteRequest_ExecuteCommand_Command) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *CakeAgent_ExecuteRequest_ExecuteCommand_Command) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

type CakeAgent_MountRequest_MountVirtioFS struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Target        string                 `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	Uid           int32                  `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Gid           int32                  `protobuf:"varint,4,opt,name=gid,proto3" json:"gid,omitempty"`
	Readonly      bool                   `protobuf:"varint,5,opt,name=readonly,proto3" json:"readonly,omitempty"`
	Early         bool                   `protobuf:"varint,6,opt,name=early,proto3" json:"early,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CakeAgent_MountRequest_MountVirtioFS) Reset() {
	*x = CakeAgent_MountRequest_MountVirtioFS{}
	mi := &file_agent_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CakeAgent_MountRequest_MountVirtioFS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CakeAgent_MountRequest_MountVirtioFS) ProtoMessage() {}

func (x *CakeAgent_MountRequest_MountVirtioFS) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CakeAgent_MountRequest_MountVirtioFS.ProtoReflect.Descriptor instead.
func (*CakeAgent_MountRequest_MountVirtioFS) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{0, 8, 0}
}

func (x *CakeAgent_MountRequest_MountVirtioFS) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CakeAgent_MountRequest_MountVirtioFS) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *CakeAgent_MountRequest_MountVirtioFS) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *CakeAgent_MountRequest_MountVirtioFS) GetGid() int32 {
	if x != nil {
		return x.Gid
	}
	return 0
}

func (x *CakeAgent_MountRequest_MountVirtioFS) GetReadonly() bool {
	if x != nil {
		return x.Readonly
	}
	return false
}

func (x *CakeAgent_MountRequest_MountVirtioFS) GetEarly() bool {
	if x != nil {
		return x.Early
	}
	return false
}

type CakeAgent_MountReply_MountVirtioFSReply struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to Response:
	//
	//	*CakeAgent_MountReply_MountVirtioFSReply_Error
	//	*CakeAgent_MountReply_MountVirtioFSReply_Success
	Response      isCakeAgent_MountReply_MountVirtioFSReply_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CakeAgent_MountReply_MountVirtioFSReply) Reset() {
	*x = CakeAgent_MountReply_MountVirtioFSReply{}
	mi := &file_agent_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CakeAgent_MountReply_MountVirtioFSReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CakeAgent_MountReply_MountVirtioFSReply) ProtoMessage() {}

func (x *CakeAgent_MountReply_MountVirtioFSReply) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CakeAgent_MountReply_MountVirtioFSReply.ProtoReflect.Descriptor instead.
func (*CakeAgent_MountReply_MountVirtioFSReply) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{0, 9, 0}
}

func (x *CakeAgent_MountReply_MountVirtioFSReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CakeAgent_MountReply_MountVirtioFSReply) GetResponse() isCakeAgent_MountReply_MountVirtioFSReply_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *CakeAgent_MountReply_MountVirtioFSReply) GetError() string {
	if x != nil {
		if x, ok := x.Response.(*CakeAgent_MountReply_MountVirtioFSReply_Error); ok {
			return x.Error
		}
	}
	return ""
}

func (x *CakeAgent_MountReply_MountVirtioFSReply) GetSuccess() bool {
	if x != nil {
		if x, ok := x.Response.(*CakeAgent_MountReply_MountVirtioFSReply_Success); ok {
			return x.Success
		}
	}
	return false
}

type isCakeAgent_MountReply_MountVirtioFSReply_Response interface {
	isCakeAgent_MountReply_MountVirtioFSReply_Response()
}

type CakeAgent_MountReply_MountVirtioFSReply_Error struct {
	Error string `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

type CakeAgent_MountReply_MountVirtioFSReply_Success struct {
	Success bool `protobuf:"varint,3,opt,name=success,proto3,oneof"`
}

func (*CakeAgent_MountReply_MountVirtioFSReply_Error) isCakeAgent_MountReply_MountVirtioFSReply_Response() {
}

func (*CakeAgent_MountReply_MountVirtioFSReply_Success) isCakeAgent_MountReply_MountVirtioFSReply_Response() {
}

var File_agent_proto protoreflect.FileDescriptor

var file_agent_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x63,
	0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x22, 0x80, 0x13, 0x0a, 0x09, 0x43, 0x61, 0x6b,
	0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x1a, 0xf3, 0x02, 0x0a, 0x0d, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x53, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x61, 0x6b, 0x65,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x61, 0x6b, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a,
	0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x12, 0x12, 0x0a, 0x03, 0x65, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x03, 0x65, 0x6f, 0x66, 0x12, 0x16, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x1a, 0x99, 0x01, 0x0a, 0x14, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4d, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x63,
	0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x61, 0x6b, 0x65, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x67, 0x75, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x22, 0x0a,
	0x0e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12,
	0x07, 0x0a, 0x03, 0x54, 0x43, 0x50, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x44, 0x50, 0x10,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x07, 0x0a, 0x05,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x51, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x1a, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x42, 0x0a, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0xae, 0x04, 0x0a, 0x09, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x61, 0x6b, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63,
	0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x61, 0x6b,
	0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x61, 0x6b, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x73, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6f, 0x73, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x1a, 0x4a,
	0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x66, 0x72, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x1a, 0x8c, 0x01, 0x0a, 0x08, 0x44,
	0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x66, 0x72, 0x65, 0x65, 0x1a, 0xad, 0x01, 0x0a, 0x0a, 0x52, 0x75,
	0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x41, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x61, 0x6b, 0x65,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x61, 0x6b, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x37, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0xde, 0x03, 0x0a, 0x0e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x63, 0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x61, 0x6b, 0x65, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x46, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x61, 0x6b, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x53, 0x69, 0x7a, 0x65, 0x48, 0x00, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x03,
	0x65, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x03, 0x65, 0x6f, 0x66,
	0x1a, 0xc4, 0x01, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x56, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x61, 0x6b, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x05, 0x73,
	0x68, 0x65, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x73, 0x68,
	0x65, 0x6c, 0x6c, 0x1a, 0x37, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x42, 0x09, 0x0a, 0x07,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x1a, 0x36, 0x0a, 0x0c, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x42,
	0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x56, 0x0a, 0x08, 0x52, 0x75,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x64, 0x65, 0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x74, 0x64, 0x65,
	0x72, 0x72, 0x1a, 0x93, 0x01, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x18,
	0x0a, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x12, 0x22, 0x0a, 0x0b, 0x65, 0x73, 0x74, 0x61,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x0b, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0xeb, 0x01, 0x0a, 0x0c, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x06, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x61, 0x6b, 0x65,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x61, 0x6b, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x46, 0x53, 0x52, 0x06, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x1a, 0x91, 0x01, 0x0a, 0x0d, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x69, 0x72, 0x74,
	0x69, 0x6f, 0x46, 0x53, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x67, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x1a, 0x82, 0x02, 0x0a, 0x0a, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4a, 0x0a, 0x06, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x61, 0x6b, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x69, 0x72, 0x74,
	0x69, 0x6f, 0x46, 0x53, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x06, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x16, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x1a, 0x68, 0x0a, 0x12, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x69,
	0x72, 0x74, 0x69, 0x6f, 0x46, 0x53, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xfb, 0x04, 0x0a, 0x10,
	0x43, 0x61, 0x6b, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x4a, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x1a,
	0x2e, 0x63, 0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x61, 0x6b, 0x65, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x63, 0x61, 0x6b,
	0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x61, 0x6b, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x42, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x61, 0x6b, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x1e, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x61, 0x6b,
	0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x45, 0x0a, 0x08, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x1a, 0x2e, 0x63,
	0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x61, 0x6b, 0x65, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x61, 0x6b, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x52,
	0x75, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x45, 0x0a, 0x03, 0x52, 0x75, 0x6e, 0x12, 0x1f,
	0x2e, 0x63, 0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x61, 0x6b, 0x65, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a,
	0x1d, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x61, 0x6b, 0x65,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x58,
	0x0a, 0x07, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x63, 0x61, 0x6b, 0x65,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x61, 0x6b, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x63, 0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x61, 0x6b, 0x65, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x4b, 0x0a, 0x05, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x21, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x61,
	0x6b, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x61, 0x6b, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4c, 0x0a, 0x06, 0x55, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x21, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x61, 0x6b, 0x65,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x61, 0x6b, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x54, 0x0a, 0x06, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x22, 0x2e,
	0x63, 0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x61, 0x6b, 0x65, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x22, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x61,
	0x6b, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42, 0x48, 0x0a, 0x18, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x6c, 0x64, 0x75, 0x6e, 0x65, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x61, 0x6b, 0x65,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x63, 0x61, 0x6b, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x50, 0x01, 0x5a, 0x13, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x61,
	0x6b, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0xa2, 0x02, 0x09, 0x63, 0x61, 0x6b, 0x65, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_agent_proto_rawDescOnce sync.Once
	file_agent_proto_rawDescData = file_agent_proto_rawDesc
)

func file_agent_proto_rawDescGZIP() []byte {
	file_agent_proto_rawDescOnce.Do(func() {
		file_agent_proto_rawDescData = protoimpl.X.CompressGZIP(file_agent_proto_rawDescData)
	})
	return file_agent_proto_rawDescData
}

var file_agent_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_agent_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_agent_proto_goTypes = []any{
	(CakeAgent_TunnelMessage_TunnelProtocol)(0), // 0: cakeagent.CakeAgent.TunnelMessage.TunnelProtocol
	(*CakeAgent)(nil),                                       // 1: cakeagent.CakeAgent
	(*CakeAgent_TunnelMessage)(nil),                         // 2: cakeagent.CakeAgent.TunnelMessage
	(*CakeAgent_Empty)(nil),                                 // 3: cakeagent.CakeAgent.Empty
	(*CakeAgent_ResizeReply)(nil),                           // 4: cakeagent.CakeAgent.ResizeReply
	(*CakeAgent_InfoReply)(nil),                             // 5: cakeagent.CakeAgent.InfoReply
	(*CakeAgent_RunCommand)(nil),                            // 6: cakeagent.CakeAgent.RunCommand
	(*CakeAgent_ExecuteRequest)(nil),                        // 7: cakeagent.CakeAgent.ExecuteRequest
	(*CakeAgent_RunReply)(nil),                              // 8: cakeagent.CakeAgent.RunReply
	(*CakeAgent_ExecuteResponse)(nil),                       // 9: cakeagent.CakeAgent.ExecuteResponse
	(*CakeAgent_MountRequest)(nil),                          // 10: cakeagent.CakeAgent.MountRequest
	(*CakeAgent_MountReply)(nil),                            // 11: cakeagent.CakeAgent.MountReply
	(*CakeAgent_TunnelMessage_TunnelMessageConnect)(nil),    // 12: cakeagent.CakeAgent.TunnelMessage.TunnelMessageConnect
	(*CakeAgent_InfoReply_MemoryInfo)(nil),                  // 13: cakeagent.CakeAgent.InfoReply.MemoryInfo
	(*CakeAgent_InfoReply_DiskInfo)(nil),                    // 14: cakeagent.CakeAgent.InfoReply.DiskInfo
	(*CakeAgent_RunCommand_Command)(nil),                    // 15: cakeagent.CakeAgent.RunCommand.Command
	(*CakeAgent_ExecuteRequest_ExecuteCommand)(nil),         // 16: cakeagent.CakeAgent.ExecuteRequest.ExecuteCommand
	(*CakeAgent_ExecuteRequest_TerminalSize)(nil),           // 17: cakeagent.CakeAgent.ExecuteRequest.TerminalSize
	(*CakeAgent_ExecuteRequest_ExecuteCommand_Command)(nil), // 18: cakeagent.CakeAgent.ExecuteRequest.ExecuteCommand.Command
	(*CakeAgent_MountRequest_MountVirtioFS)(nil),            // 19: cakeagent.CakeAgent.MountRequest.MountVirtioFS
	(*CakeAgent_MountReply_MountVirtioFSReply)(nil),         // 20: cakeagent.CakeAgent.MountReply.MountVirtioFSReply
}
var file_agent_proto_depIdxs = []int32{
	12, // 0: cakeagent.CakeAgent.TunnelMessage.connect:type_name -> cakeagent.CakeAgent.TunnelMessage.TunnelMessageConnect
	13, // 1: cakeagent.CakeAgent.InfoReply.memory:type_name -> cakeagent.CakeAgent.InfoReply.MemoryInfo
	14, // 2: cakeagent.CakeAgent.InfoReply.diskInfos:type_name -> cakeagent.CakeAgent.InfoReply.DiskInfo
	15, // 3: cakeagent.CakeAgent.RunCommand.command:type_name -> cakeagent.CakeAgent.RunCommand.Command
	16, // 4: cakeagent.CakeAgent.ExecuteRequest.command:type_name -> cakeagent.CakeAgent.ExecuteRequest.ExecuteCommand
	17, // 5: cakeagent.CakeAgent.ExecuteRequest.size:type_name -> cakeagent.CakeAgent.ExecuteRequest.TerminalSize
	19, // 6: cakeagent.CakeAgent.MountRequest.mounts:type_name -> cakeagent.CakeAgent.MountRequest.MountVirtioFS
	20, // 7: cakeagent.CakeAgent.MountReply.mounts:type_name -> cakeagent.CakeAgent.MountReply.MountVirtioFSReply
	0,  // 8: cakeagent.CakeAgent.TunnelMessage.TunnelMessageConnect.protocol:type_name -> cakeagent.CakeAgent.TunnelMessage.TunnelProtocol
	18, // 9: cakeagent.CakeAgent.ExecuteRequest.ExecuteCommand.command:type_name -> cakeagent.CakeAgent.ExecuteRequest.ExecuteCommand.Command
	3,  // 10: cakeagent.CakeAgentService.ResizeDisk:input_type -> cakeagent.CakeAgent.Empty
	3,  // 11: cakeagent.CakeAgentService.Info:input_type -> cakeagent.CakeAgent.Empty
	3,  // 12: cakeagent.CakeAgentService.Shutdown:input_type -> cakeagent.CakeAgent.Empty
	6,  // 13: cakeagent.CakeAgentService.Run:input_type -> cakeagent.CakeAgent.RunCommand
	7,  // 14: cakeagent.CakeAgentService.Execute:input_type -> cakeagent.CakeAgent.ExecuteRequest
	10, // 15: cakeagent.CakeAgentService.Mount:input_type -> cakeagent.CakeAgent.MountRequest
	10, // 16: cakeagent.CakeAgentService.Umount:input_type -> cakeagent.CakeAgent.MountRequest
	2,  // 17: cakeagent.CakeAgentService.Tunnel:input_type -> cakeagent.CakeAgent.TunnelMessage
	4,  // 18: cakeagent.CakeAgentService.ResizeDisk:output_type -> cakeagent.CakeAgent.ResizeReply
	5,  // 19: cakeagent.CakeAgentService.Info:output_type -> cakeagent.CakeAgent.InfoReply
	8,  // 20: cakeagent.CakeAgentService.Shutdown:output_type -> cakeagent.CakeAgent.RunReply
	8,  // 21: cakeagent.CakeAgentService.Run:output_type -> cakeagent.CakeAgent.RunReply
	9,  // 22: cakeagent.CakeAgentService.Execute:output_type -> cakeagent.CakeAgent.ExecuteResponse
	11, // 23: cakeagent.CakeAgentService.Mount:output_type -> cakeagent.CakeAgent.MountReply
	11, // 24: cakeagent.CakeAgentService.Umount:output_type -> cakeagent.CakeAgent.MountReply
	2,  // 25: cakeagent.CakeAgentService.Tunnel:output_type -> cakeagent.CakeAgent.TunnelMessage
	18, // [18:26] is the sub-list for method output_type
	10, // [10:18] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_agent_proto_init() }
func file_agent_proto_init() {
	if File_agent_proto != nil {
		return
	}
	file_agent_proto_msgTypes[1].OneofWrappers = []any{
		(*CakeAgent_TunnelMessage_Connect)(nil),
		(*CakeAgent_TunnelMessage_Datas)(nil),
		(*CakeAgent_TunnelMessage_Eof)(nil),
		(*CakeAgent_TunnelMessage_Error)(nil),
	}
	file_agent_proto_msgTypes[3].OneofWrappers = []any{
		(*CakeAgent_ResizeReply_Success)(nil),
		(*CakeAgent_ResizeReply_Failure)(nil),
	}
	file_agent_proto_msgTypes[5].OneofWrappers = []any{}
	file_agent_proto_msgTypes[6].OneofWrappers = []any{
		(*CakeAgent_ExecuteRequest_Command)(nil),
		(*CakeAgent_ExecuteRequest_Input)(nil),
		(*CakeAgent_ExecuteRequest_Size)(nil),
		(*CakeAgent_ExecuteRequest_Eof)(nil),
	}
	file_agent_proto_msgTypes[8].OneofWrappers = []any{
		(*CakeAgent_ExecuteResponse_ExitCode)(nil),
		(*CakeAgent_ExecuteResponse_Stdout)(nil),
		(*CakeAgent_ExecuteResponse_Stderr)(nil),
		(*CakeAgent_ExecuteResponse_Established)(nil),
	}
	file_agent_proto_msgTypes[10].OneofWrappers = []any{
		(*CakeAgent_MountReply_Error)(nil),
		(*CakeAgent_MountReply_Success)(nil),
	}
	file_agent_proto_msgTypes[15].OneofWrappers = []any{
		(*CakeAgent_ExecuteRequest_ExecuteCommand_Command_)(nil),
		(*CakeAgent_ExecuteRequest_ExecuteCommand_Shell)(nil),
	}
	file_agent_proto_msgTypes[19].OneofWrappers = []any{
		(*CakeAgent_MountReply_MountVirtioFSReply_Error)(nil),
		(*CakeAgent_MountReply_MountVirtioFSReply_Success)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_agent_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_agent_proto_goTypes,
		DependencyIndexes: file_agent_proto_depIdxs,
		EnumInfos:         file_agent_proto_enumTypes,
		MessageInfos:      file_agent_proto_msgTypes,
	}.Build()
	File_agent_proto = out.File
	file_agent_proto_rawDesc = nil
	file_agent_proto_goTypes = nil
	file_agent_proto_depIdxs = nil
}

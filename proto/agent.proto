syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.aldunelabs.cakeagent";
option java_outer_classname = "cakeagent";
option objc_class_prefix = "cakeagent";
option go_package = "linux/pkg/cakeagent";

package cakeagent;

service CakeAgentService {
	rpc ResizeDisk (CakeAgent.Empty) returns (CakeAgent.ResizeReply);
	rpc Info (CakeAgent.Empty) returns (CakeAgent.InfoReply);
	rpc Shutdown (CakeAgent.Empty) returns (CakeAgent.RunReply);
	rpc Run (CakeAgent.RunCommand) returns (CakeAgent.RunReply);
	rpc Execute (stream CakeAgent.ExecuteRequest) returns (stream CakeAgent.ExecuteResponse);
	rpc Mount(CakeAgent.MountRequest) returns (CakeAgent.MountReply);
	rpc Umount(CakeAgent.MountRequest) returns (CakeAgent.MountReply);
	rpc Tunnel(stream CakeAgent.TunnelMessage) returns (stream CakeAgent.TunnelMessage);
	rpc Events(CakeAgent.Empty) returns (stream CakeAgent.TunnelPortForwardEvent);
}

message CakeAgent {
	message TunnelMessage {
		enum TunnelProtocol {
			TCP = 0;
			UDP = 1;
		}

		message TunnelMessageConnect {
			string id = 1;
			TunnelProtocol protocol = 2; //tcp, udp
			string guestAddress = 3; //ip address of the guest
		}

		oneof message {
			TunnelMessageConnect connect = 1;
			bytes datas = 2;
			bool eof = 3; //end of file
			string error = 4; //error message
		}
	}

	message TunnelPortForwardEvent {
		message TunnelPortForward {
			TunnelMessage.TunnelProtocol protocol = 1; //tcp, udp
			string ip = 2; //ip address of the guest
			int32 port = 3; //port of the guest
		}

		message ForwardEvent {
			repeated TunnelPortForward addedPorts = 1; //list of ports
			repeated TunnelPortForward removedPorts = 12; //list of ports
		}

		oneof event {
			ForwardEvent forwardEvent = 1;
			string error = 2; //error message
		}
	}

	message Empty {
	}

	message ResizeReply {
		oneof Response {
			bool success = 1;
			string failure = 2;
		}
	}

	message InfoReply {
		message MemoryInfo {
			uint64 total = 1;
			uint64 free = 2;
			uint64 used = 3;
		}

		message DiskInfo {
			string device = 1;
			string mount = 2;
			string fsType = 3;
			uint64 size = 4;
			uint64 used = 5;
			uint64 free = 6;
		}

		string version = 1;
		uint64 uptime = 2;
		MemoryInfo memory = 3;
		int32 cpuCount = 4;
		repeated DiskInfo diskInfos = 5;
		repeated string ipaddresses = 6;
		string osname = 7;
		string hostname = 8;
		string release = 9;
	}

	message RunCommand {
		message Command {
			string command = 1;
			repeated string args = 2;
		}

		Command command = 1;
		optional bytes input = 2;
	}

	message ExecuteRequest {
		message ExecuteCommand {
			message Command {
				string command = 1;
				repeated string args = 2;
			}
			
			oneof execute {
				Command command = 1;
				bool shell = 2;
			}
		}
		
		message TerminalSize {
			int32 rows = 1;
			int32 cols = 2;
		}
		
		oneof request {
			ExecuteCommand command = 1;
			bytes input = 2;
			TerminalSize size = 3;
			bool eof = 4;
		}
	}

	message RunReply {
		int32 exitCode = 1;
		bytes stdout = 2;
		bytes stderr = 3;
	}

	message ExecuteResponse {
		oneof response {
			int32 exitCode = 1;
			bytes stdout = 2;
			bytes stderr = 3;
			bool established = 4;
		}
	}

	message MountRequest {
		message MountVirtioFS {
			string name = 1;
			string target = 2;
			int32 uid = 3;
			int32 gid = 4;
			bool readonly = 5;
			bool early = 6;
		}
		
		repeated MountVirtioFS mounts = 1;
	}

	message MountReply {
		message MountVirtioFSReply {
			string name = 1;
			oneof response {
				string error = 2;
				bool success = 3;
			}
		}
		
		repeated MountVirtioFSReply mounts = 1;

		oneof response {
			string error = 2;
			bool success = 3;
		}
	}
}
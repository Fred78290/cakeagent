// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: agent.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Cakeagent_CakeAgent: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Empty: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct ResizeReply: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var response: Cakeagent_CakeAgent.ResizeReply.OneOf_Response? = nil

    public var success: Bool {
      get {
        if case .success(let v)? = response {return v}
        return false
      }
      set {response = .success(newValue)}
    }

    public var failure: String {
      get {
        if case .failure(let v)? = response {return v}
        return String()
      }
      set {response = .failure(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_Response: Equatable, Sendable {
      case success(Bool)
      case failure(String)

    }

    public init() {}
  }

  public struct InfoReply: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var version: String = String()

    public var uptime: UInt64 = 0

    public var memory: Cakeagent_CakeAgent.InfoReply.MemoryInfo {
      get {return _memory ?? Cakeagent_CakeAgent.InfoReply.MemoryInfo()}
      set {_memory = newValue}
    }
    /// Returns true if `memory` has been explicitly set.
    public var hasMemory: Bool {return self._memory != nil}
    /// Clears the value of `memory`. Subsequent reads from it will return its default value.
    public mutating func clearMemory() {self._memory = nil}

    public var cpuCount: Int32 = 0

    public var diskInfos: [Cakeagent_CakeAgent.InfoReply.DiskInfo] = []

    public var ipaddresses: [String] = []

    public var osname: String = String()

    public var hostname: String = String()

    public var release: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public struct MemoryInfo: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var total: UInt64 = 0

      public var free: UInt64 = 0

      public var used: UInt64 = 0

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public struct DiskInfo: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var device: String = String()

      public var mount: String = String()

      public var fsType: String = String()

      public var size: UInt64 = 0

      public var used: UInt64 = 0

      public var free: UInt64 = 0

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public init() {}

    fileprivate var _memory: Cakeagent_CakeAgent.InfoReply.MemoryInfo? = nil
  }

  public struct RunCommand: @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var command: Cakeagent_CakeAgent.RunCommand.Command {
      get {return _command ?? Cakeagent_CakeAgent.RunCommand.Command()}
      set {_command = newValue}
    }
    /// Returns true if `command` has been explicitly set.
    public var hasCommand: Bool {return self._command != nil}
    /// Clears the value of `command`. Subsequent reads from it will return its default value.
    public mutating func clearCommand() {self._command = nil}

    public var input: Data {
      get {return _input ?? Data()}
      set {_input = newValue}
    }
    /// Returns true if `input` has been explicitly set.
    public var hasInput: Bool {return self._input != nil}
    /// Clears the value of `input`. Subsequent reads from it will return its default value.
    public mutating func clearInput() {self._input = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public struct Command: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var command: String = String()

      public var args: [String] = []

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public init() {}

    fileprivate var _command: Cakeagent_CakeAgent.RunCommand.Command? = nil
    fileprivate var _input: Data? = nil
  }

  public struct ExecuteRequest: @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var request: Cakeagent_CakeAgent.ExecuteRequest.OneOf_Request? = nil

    public var command: Cakeagent_CakeAgent.ExecuteRequest.ExecuteCommand {
      get {
        if case .command(let v)? = request {return v}
        return Cakeagent_CakeAgent.ExecuteRequest.ExecuteCommand()
      }
      set {request = .command(newValue)}
    }

    public var input: Data {
      get {
        if case .input(let v)? = request {return v}
        return Data()
      }
      set {request = .input(newValue)}
    }

    public var size: Cakeagent_CakeAgent.ExecuteRequest.TerminalSize {
      get {
        if case .size(let v)? = request {return v}
        return Cakeagent_CakeAgent.ExecuteRequest.TerminalSize()
      }
      set {request = .size(newValue)}
    }

    public var eof: Bool {
      get {
        if case .eof(let v)? = request {return v}
        return false
      }
      set {request = .eof(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_Request: Equatable, @unchecked Sendable {
      case command(Cakeagent_CakeAgent.ExecuteRequest.ExecuteCommand)
      case input(Data)
      case size(Cakeagent_CakeAgent.ExecuteRequest.TerminalSize)
      case eof(Bool)

    }

    public struct ExecuteCommand: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var execute: Cakeagent_CakeAgent.ExecuteRequest.ExecuteCommand.OneOf_Execute? = nil

      public var command: Cakeagent_CakeAgent.ExecuteRequest.ExecuteCommand.Command {
        get {
          if case .command(let v)? = execute {return v}
          return Cakeagent_CakeAgent.ExecuteRequest.ExecuteCommand.Command()
        }
        set {execute = .command(newValue)}
      }

      public var shell: Bool {
        get {
          if case .shell(let v)? = execute {return v}
          return false
        }
        set {execute = .shell(newValue)}
      }

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public enum OneOf_Execute: Equatable, Sendable {
        case command(Cakeagent_CakeAgent.ExecuteRequest.ExecuteCommand.Command)
        case shell(Bool)

      }

      public struct Command: Sendable {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var command: String = String()

        public var args: [String] = []

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public init() {}
    }

    public struct TerminalSize: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var rows: Int32 = 0

      public var cols: Int32 = 0

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public init() {}
  }

  public struct RunReply: @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var exitCode: Int32 = 0

    public var stdout: Data = Data()

    public var stderr: Data = Data()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct ExecuteResponse: @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var response: Cakeagent_CakeAgent.ExecuteResponse.OneOf_Response? = nil

    public var exitCode: Int32 {
      get {
        if case .exitCode(let v)? = response {return v}
        return 0
      }
      set {response = .exitCode(newValue)}
    }

    public var stdout: Data {
      get {
        if case .stdout(let v)? = response {return v}
        return Data()
      }
      set {response = .stdout(newValue)}
    }

    public var stderr: Data {
      get {
        if case .stderr(let v)? = response {return v}
        return Data()
      }
      set {response = .stderr(newValue)}
    }

    public var established: Bool {
      get {
        if case .established(let v)? = response {return v}
        return false
      }
      set {response = .established(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_Response: Equatable, @unchecked Sendable {
      case exitCode(Int32)
      case stdout(Data)
      case stderr(Data)
      case established(Bool)

    }

    public init() {}
  }

  public struct MountRequest: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var mounts: [Cakeagent_CakeAgent.MountRequest.MountVirtioFS] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public struct MountVirtioFS: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var name: String = String()

      public var target: String = String()

      public var uid: Int32 = 0

      public var gid: Int32 = 0

      public var readonly: Bool = false

      public var early: Bool = false

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public init() {}
  }

  public struct MountReply: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var mounts: [Cakeagent_CakeAgent.MountReply.MountVirtioFSReply] = []

    public var response: Cakeagent_CakeAgent.MountReply.OneOf_Response? = nil

    public var error: String {
      get {
        if case .error(let v)? = response {return v}
        return String()
      }
      set {response = .error(newValue)}
    }

    public var success: Bool {
      get {
        if case .success(let v)? = response {return v}
        return false
      }
      set {response = .success(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_Response: Equatable, Sendable {
      case error(String)
      case success(Bool)

    }

    public struct MountVirtioFSReply: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var name: String = String()

      public var response: Cakeagent_CakeAgent.MountReply.MountVirtioFSReply.OneOf_Response? = nil

      public var error: String {
        get {
          if case .error(let v)? = response {return v}
          return String()
        }
        set {response = .error(newValue)}
      }

      public var success: Bool {
        get {
          if case .success(let v)? = response {return v}
          return false
        }
        set {response = .success(newValue)}
      }

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public enum OneOf_Response: Equatable, Sendable {
        case error(String)
        case success(Bool)

      }

      public init() {}
    }

    public init() {}
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cakeagent"

extension Cakeagent_CakeAgent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CakeAgent"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cakeagent_CakeAgent, rhs: Cakeagent_CakeAgent) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cakeagent_CakeAgent.Empty: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Cakeagent_CakeAgent.protoMessageName + ".Empty"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cakeagent_CakeAgent.Empty, rhs: Cakeagent_CakeAgent.Empty) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cakeagent_CakeAgent.ResizeReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Cakeagent_CakeAgent.protoMessageName + ".ResizeReply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "success"),
    2: .same(proto: "failure"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {
          if self.response != nil {try decoder.handleConflictingOneOf()}
          self.response = .success(v)
        }
      }()
      case 2: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.response != nil {try decoder.handleConflictingOneOf()}
          self.response = .failure(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.response {
    case .success?: try {
      guard case .success(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }()
    case .failure?: try {
      guard case .failure(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cakeagent_CakeAgent.ResizeReply, rhs: Cakeagent_CakeAgent.ResizeReply) -> Bool {
    if lhs.response != rhs.response {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cakeagent_CakeAgent.InfoReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Cakeagent_CakeAgent.protoMessageName + ".InfoReply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "uptime"),
    3: .same(proto: "memory"),
    4: .same(proto: "cpuCount"),
    5: .same(proto: "diskInfos"),
    6: .same(proto: "ipaddresses"),
    7: .same(proto: "osname"),
    8: .same(proto: "hostname"),
    9: .same(proto: "release"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.version) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.uptime) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._memory) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.cpuCount) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.diskInfos) }()
      case 6: try { try decoder.decodeRepeatedStringField(value: &self.ipaddresses) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.osname) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.hostname) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.release) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 1)
    }
    if self.uptime != 0 {
      try visitor.visitSingularUInt64Field(value: self.uptime, fieldNumber: 2)
    }
    try { if let v = self._memory {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.cpuCount != 0 {
      try visitor.visitSingularInt32Field(value: self.cpuCount, fieldNumber: 4)
    }
    if !self.diskInfos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.diskInfos, fieldNumber: 5)
    }
    if !self.ipaddresses.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ipaddresses, fieldNumber: 6)
    }
    if !self.osname.isEmpty {
      try visitor.visitSingularStringField(value: self.osname, fieldNumber: 7)
    }
    if !self.hostname.isEmpty {
      try visitor.visitSingularStringField(value: self.hostname, fieldNumber: 8)
    }
    if !self.release.isEmpty {
      try visitor.visitSingularStringField(value: self.release, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cakeagent_CakeAgent.InfoReply, rhs: Cakeagent_CakeAgent.InfoReply) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.uptime != rhs.uptime {return false}
    if lhs._memory != rhs._memory {return false}
    if lhs.cpuCount != rhs.cpuCount {return false}
    if lhs.diskInfos != rhs.diskInfos {return false}
    if lhs.ipaddresses != rhs.ipaddresses {return false}
    if lhs.osname != rhs.osname {return false}
    if lhs.hostname != rhs.hostname {return false}
    if lhs.release != rhs.release {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cakeagent_CakeAgent.InfoReply.MemoryInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Cakeagent_CakeAgent.InfoReply.protoMessageName + ".MemoryInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "total"),
    2: .same(proto: "free"),
    3: .same(proto: "used"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.total) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.free) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.used) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.total != 0 {
      try visitor.visitSingularUInt64Field(value: self.total, fieldNumber: 1)
    }
    if self.free != 0 {
      try visitor.visitSingularUInt64Field(value: self.free, fieldNumber: 2)
    }
    if self.used != 0 {
      try visitor.visitSingularUInt64Field(value: self.used, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cakeagent_CakeAgent.InfoReply.MemoryInfo, rhs: Cakeagent_CakeAgent.InfoReply.MemoryInfo) -> Bool {
    if lhs.total != rhs.total {return false}
    if lhs.free != rhs.free {return false}
    if lhs.used != rhs.used {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cakeagent_CakeAgent.InfoReply.DiskInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Cakeagent_CakeAgent.InfoReply.protoMessageName + ".DiskInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "device"),
    2: .same(proto: "mount"),
    3: .same(proto: "fsType"),
    4: .same(proto: "size"),
    5: .same(proto: "used"),
    6: .same(proto: "free"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.device) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.mount) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.fsType) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.size) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.used) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.free) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.device.isEmpty {
      try visitor.visitSingularStringField(value: self.device, fieldNumber: 1)
    }
    if !self.mount.isEmpty {
      try visitor.visitSingularStringField(value: self.mount, fieldNumber: 2)
    }
    if !self.fsType.isEmpty {
      try visitor.visitSingularStringField(value: self.fsType, fieldNumber: 3)
    }
    if self.size != 0 {
      try visitor.visitSingularUInt64Field(value: self.size, fieldNumber: 4)
    }
    if self.used != 0 {
      try visitor.visitSingularUInt64Field(value: self.used, fieldNumber: 5)
    }
    if self.free != 0 {
      try visitor.visitSingularUInt64Field(value: self.free, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cakeagent_CakeAgent.InfoReply.DiskInfo, rhs: Cakeagent_CakeAgent.InfoReply.DiskInfo) -> Bool {
    if lhs.device != rhs.device {return false}
    if lhs.mount != rhs.mount {return false}
    if lhs.fsType != rhs.fsType {return false}
    if lhs.size != rhs.size {return false}
    if lhs.used != rhs.used {return false}
    if lhs.free != rhs.free {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cakeagent_CakeAgent.RunCommand: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Cakeagent_CakeAgent.protoMessageName + ".RunCommand"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "command"),
    2: .same(proto: "input"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._command) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self._input) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._command {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._input {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cakeagent_CakeAgent.RunCommand, rhs: Cakeagent_CakeAgent.RunCommand) -> Bool {
    if lhs._command != rhs._command {return false}
    if lhs._input != rhs._input {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cakeagent_CakeAgent.RunCommand.Command: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Cakeagent_CakeAgent.RunCommand.protoMessageName + ".Command"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "command"),
    2: .same(proto: "args"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.command) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.args) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.command.isEmpty {
      try visitor.visitSingularStringField(value: self.command, fieldNumber: 1)
    }
    if !self.args.isEmpty {
      try visitor.visitRepeatedStringField(value: self.args, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cakeagent_CakeAgent.RunCommand.Command, rhs: Cakeagent_CakeAgent.RunCommand.Command) -> Bool {
    if lhs.command != rhs.command {return false}
    if lhs.args != rhs.args {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cakeagent_CakeAgent.ExecuteRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Cakeagent_CakeAgent.protoMessageName + ".ExecuteRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "command"),
    2: .same(proto: "input"),
    3: .same(proto: "size"),
    4: .same(proto: "eof"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Cakeagent_CakeAgent.ExecuteRequest.ExecuteCommand?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .command(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .command(v)
        }
      }()
      case 2: try {
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {
          if self.request != nil {try decoder.handleConflictingOneOf()}
          self.request = .input(v)
        }
      }()
      case 3: try {
        var v: Cakeagent_CakeAgent.ExecuteRequest.TerminalSize?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .size(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .size(v)
        }
      }()
      case 4: try {
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {
          if self.request != nil {try decoder.handleConflictingOneOf()}
          self.request = .eof(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.request {
    case .command?: try {
      guard case .command(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .input?: try {
      guard case .input(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    }()
    case .size?: try {
      guard case .size(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .eof?: try {
      guard case .eof(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cakeagent_CakeAgent.ExecuteRequest, rhs: Cakeagent_CakeAgent.ExecuteRequest) -> Bool {
    if lhs.request != rhs.request {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cakeagent_CakeAgent.ExecuteRequest.ExecuteCommand: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Cakeagent_CakeAgent.ExecuteRequest.protoMessageName + ".ExecuteCommand"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "command"),
    2: .same(proto: "shell"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Cakeagent_CakeAgent.ExecuteRequest.ExecuteCommand.Command?
        var hadOneofValue = false
        if let current = self.execute {
          hadOneofValue = true
          if case .command(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.execute = .command(v)
        }
      }()
      case 2: try {
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {
          if self.execute != nil {try decoder.handleConflictingOneOf()}
          self.execute = .shell(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.execute {
    case .command?: try {
      guard case .command(let v)? = self.execute else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .shell?: try {
      guard case .shell(let v)? = self.execute else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cakeagent_CakeAgent.ExecuteRequest.ExecuteCommand, rhs: Cakeagent_CakeAgent.ExecuteRequest.ExecuteCommand) -> Bool {
    if lhs.execute != rhs.execute {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cakeagent_CakeAgent.ExecuteRequest.ExecuteCommand.Command: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Cakeagent_CakeAgent.ExecuteRequest.ExecuteCommand.protoMessageName + ".Command"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "command"),
    2: .same(proto: "args"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.command) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.args) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.command.isEmpty {
      try visitor.visitSingularStringField(value: self.command, fieldNumber: 1)
    }
    if !self.args.isEmpty {
      try visitor.visitRepeatedStringField(value: self.args, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cakeagent_CakeAgent.ExecuteRequest.ExecuteCommand.Command, rhs: Cakeagent_CakeAgent.ExecuteRequest.ExecuteCommand.Command) -> Bool {
    if lhs.command != rhs.command {return false}
    if lhs.args != rhs.args {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cakeagent_CakeAgent.ExecuteRequest.TerminalSize: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Cakeagent_CakeAgent.ExecuteRequest.protoMessageName + ".TerminalSize"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rows"),
    2: .same(proto: "cols"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.rows) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.cols) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.rows != 0 {
      try visitor.visitSingularInt32Field(value: self.rows, fieldNumber: 1)
    }
    if self.cols != 0 {
      try visitor.visitSingularInt32Field(value: self.cols, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cakeagent_CakeAgent.ExecuteRequest.TerminalSize, rhs: Cakeagent_CakeAgent.ExecuteRequest.TerminalSize) -> Bool {
    if lhs.rows != rhs.rows {return false}
    if lhs.cols != rhs.cols {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cakeagent_CakeAgent.RunReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Cakeagent_CakeAgent.protoMessageName + ".RunReply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "exitCode"),
    2: .same(proto: "stdout"),
    3: .same(proto: "stderr"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.exitCode) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.stdout) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.stderr) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.exitCode != 0 {
      try visitor.visitSingularInt32Field(value: self.exitCode, fieldNumber: 1)
    }
    if !self.stdout.isEmpty {
      try visitor.visitSingularBytesField(value: self.stdout, fieldNumber: 2)
    }
    if !self.stderr.isEmpty {
      try visitor.visitSingularBytesField(value: self.stderr, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cakeagent_CakeAgent.RunReply, rhs: Cakeagent_CakeAgent.RunReply) -> Bool {
    if lhs.exitCode != rhs.exitCode {return false}
    if lhs.stdout != rhs.stdout {return false}
    if lhs.stderr != rhs.stderr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cakeagent_CakeAgent.ExecuteResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Cakeagent_CakeAgent.protoMessageName + ".ExecuteResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "exitCode"),
    2: .same(proto: "stdout"),
    3: .same(proto: "stderr"),
    4: .same(proto: "established"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.response != nil {try decoder.handleConflictingOneOf()}
          self.response = .exitCode(v)
        }
      }()
      case 2: try {
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {
          if self.response != nil {try decoder.handleConflictingOneOf()}
          self.response = .stdout(v)
        }
      }()
      case 3: try {
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {
          if self.response != nil {try decoder.handleConflictingOneOf()}
          self.response = .stderr(v)
        }
      }()
      case 4: try {
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {
          if self.response != nil {try decoder.handleConflictingOneOf()}
          self.response = .established(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.response {
    case .exitCode?: try {
      guard case .exitCode(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }()
    case .stdout?: try {
      guard case .stdout(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    }()
    case .stderr?: try {
      guard case .stderr(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
    }()
    case .established?: try {
      guard case .established(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cakeagent_CakeAgent.ExecuteResponse, rhs: Cakeagent_CakeAgent.ExecuteResponse) -> Bool {
    if lhs.response != rhs.response {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cakeagent_CakeAgent.MountRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Cakeagent_CakeAgent.protoMessageName + ".MountRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mounts"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.mounts) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.mounts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.mounts, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cakeagent_CakeAgent.MountRequest, rhs: Cakeagent_CakeAgent.MountRequest) -> Bool {
    if lhs.mounts != rhs.mounts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cakeagent_CakeAgent.MountRequest.MountVirtioFS: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Cakeagent_CakeAgent.MountRequest.protoMessageName + ".MountVirtioFS"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "target"),
    3: .same(proto: "uid"),
    4: .same(proto: "gid"),
    5: .same(proto: "readonly"),
    6: .same(proto: "early"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.target) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.uid) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.gid) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.readonly) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.early) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.target.isEmpty {
      try visitor.visitSingularStringField(value: self.target, fieldNumber: 2)
    }
    if self.uid != 0 {
      try visitor.visitSingularInt32Field(value: self.uid, fieldNumber: 3)
    }
    if self.gid != 0 {
      try visitor.visitSingularInt32Field(value: self.gid, fieldNumber: 4)
    }
    if self.readonly != false {
      try visitor.visitSingularBoolField(value: self.readonly, fieldNumber: 5)
    }
    if self.early != false {
      try visitor.visitSingularBoolField(value: self.early, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cakeagent_CakeAgent.MountRequest.MountVirtioFS, rhs: Cakeagent_CakeAgent.MountRequest.MountVirtioFS) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.target != rhs.target {return false}
    if lhs.uid != rhs.uid {return false}
    if lhs.gid != rhs.gid {return false}
    if lhs.readonly != rhs.readonly {return false}
    if lhs.early != rhs.early {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cakeagent_CakeAgent.MountReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Cakeagent_CakeAgent.protoMessageName + ".MountReply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mounts"),
    2: .same(proto: "error"),
    3: .same(proto: "success"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.mounts) }()
      case 2: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.response != nil {try decoder.handleConflictingOneOf()}
          self.response = .error(v)
        }
      }()
      case 3: try {
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {
          if self.response != nil {try decoder.handleConflictingOneOf()}
          self.response = .success(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.mounts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.mounts, fieldNumber: 1)
    }
    switch self.response {
    case .error?: try {
      guard case .error(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case .success?: try {
      guard case .success(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cakeagent_CakeAgent.MountReply, rhs: Cakeagent_CakeAgent.MountReply) -> Bool {
    if lhs.mounts != rhs.mounts {return false}
    if lhs.response != rhs.response {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cakeagent_CakeAgent.MountReply.MountVirtioFSReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Cakeagent_CakeAgent.MountReply.protoMessageName + ".MountVirtioFSReply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "error"),
    3: .same(proto: "success"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.response != nil {try decoder.handleConflictingOneOf()}
          self.response = .error(v)
        }
      }()
      case 3: try {
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {
          if self.response != nil {try decoder.handleConflictingOneOf()}
          self.response = .success(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    switch self.response {
    case .error?: try {
      guard case .error(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case .success?: try {
      guard case .success(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cakeagent_CakeAgent.MountReply.MountVirtioFSReply, rhs: Cakeagent_CakeAgent.MountReply.MountVirtioFSReply) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.response != rhs.response {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: agent.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Cakeagent_CakeAgentServiceClient`, then call methods of this protocol to make API calls.
public protocol Cakeagent_CakeAgentServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cakeagent_CakeAgentServiceClientInterceptorFactoryProtocol? { get }

  func resizeDisk(
    _ request: Cakeagent_CakeAgent.Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Cakeagent_CakeAgent.Empty, Cakeagent_CakeAgent.ResizeReply>

  func info(
    _ request: Cakeagent_CakeAgent.Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Cakeagent_CakeAgent.Empty, Cakeagent_CakeAgent.InfoReply>

  func shutdown(
    _ request: Cakeagent_CakeAgent.Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Cakeagent_CakeAgent.Empty, Cakeagent_CakeAgent.RunReply>

  func run(
    _ request: Cakeagent_CakeAgent.RunCommand,
    callOptions: CallOptions?
  ) -> UnaryCall<Cakeagent_CakeAgent.RunCommand, Cakeagent_CakeAgent.RunReply>

  func execute(
    callOptions: CallOptions?,
    handler: @escaping (Cakeagent_CakeAgent.ExecuteResponse) -> Void
  ) -> BidirectionalStreamingCall<Cakeagent_CakeAgent.ExecuteRequest, Cakeagent_CakeAgent.ExecuteResponse>

  func mount(
    _ request: Cakeagent_CakeAgent.MountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cakeagent_CakeAgent.MountRequest, Cakeagent_CakeAgent.MountReply>

  func umount(
    _ request: Cakeagent_CakeAgent.MountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cakeagent_CakeAgent.MountRequest, Cakeagent_CakeAgent.MountReply>

  func tunnel(
    callOptions: CallOptions?,
    handler: @escaping (Cakeagent_CakeAgent.TunnelMessage) -> Void
  ) -> BidirectionalStreamingCall<Cakeagent_CakeAgent.TunnelMessage, Cakeagent_CakeAgent.TunnelMessage>

  func events(
    _ request: Cakeagent_CakeAgent.Empty,
    callOptions: CallOptions?,
    handler: @escaping (Cakeagent_CakeAgent.TunnelPortForwardEvent) -> Void
  ) -> ServerStreamingCall<Cakeagent_CakeAgent.Empty, Cakeagent_CakeAgent.TunnelPortForwardEvent>
}

extension Cakeagent_CakeAgentServiceClientProtocol {
  public var serviceName: String {
    return "cakeagent.CakeAgentService"
  }

  /// Unary call to ResizeDisk
  ///
  /// - Parameters:
  ///   - request: Request to send to ResizeDisk.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func resizeDisk(
    _ request: Cakeagent_CakeAgent.Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cakeagent_CakeAgent.Empty, Cakeagent_CakeAgent.ResizeReply> {
    return self.makeUnaryCall(
      path: Cakeagent_CakeAgentServiceClientMetadata.Methods.resizeDisk.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResizeDiskInterceptors() ?? []
    )
  }

  /// Unary call to Info
  ///
  /// - Parameters:
  ///   - request: Request to send to Info.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func info(
    _ request: Cakeagent_CakeAgent.Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cakeagent_CakeAgent.Empty, Cakeagent_CakeAgent.InfoReply> {
    return self.makeUnaryCall(
      path: Cakeagent_CakeAgentServiceClientMetadata.Methods.info.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInfoInterceptors() ?? []
    )
  }

  /// Unary call to Shutdown
  ///
  /// - Parameters:
  ///   - request: Request to send to Shutdown.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func shutdown(
    _ request: Cakeagent_CakeAgent.Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cakeagent_CakeAgent.Empty, Cakeagent_CakeAgent.RunReply> {
    return self.makeUnaryCall(
      path: Cakeagent_CakeAgentServiceClientMetadata.Methods.shutdown.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeShutdownInterceptors() ?? []
    )
  }

  /// Unary call to Run
  ///
  /// - Parameters:
  ///   - request: Request to send to Run.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func run(
    _ request: Cakeagent_CakeAgent.RunCommand,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cakeagent_CakeAgent.RunCommand, Cakeagent_CakeAgent.RunReply> {
    return self.makeUnaryCall(
      path: Cakeagent_CakeAgentServiceClientMetadata.Methods.run.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRunInterceptors() ?? []
    )
  }

  /// Bidirectional streaming call to Execute
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func execute(
    callOptions: CallOptions? = nil,
    handler: @escaping (Cakeagent_CakeAgent.ExecuteResponse) -> Void
  ) -> BidirectionalStreamingCall<Cakeagent_CakeAgent.ExecuteRequest, Cakeagent_CakeAgent.ExecuteResponse> {
    return self.makeBidirectionalStreamingCall(
      path: Cakeagent_CakeAgentServiceClientMetadata.Methods.execute.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExecuteInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unary call to Mount
  ///
  /// - Parameters:
  ///   - request: Request to send to Mount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func mount(
    _ request: Cakeagent_CakeAgent.MountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cakeagent_CakeAgent.MountRequest, Cakeagent_CakeAgent.MountReply> {
    return self.makeUnaryCall(
      path: Cakeagent_CakeAgentServiceClientMetadata.Methods.mount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMountInterceptors() ?? []
    )
  }

  /// Unary call to Umount
  ///
  /// - Parameters:
  ///   - request: Request to send to Umount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func umount(
    _ request: Cakeagent_CakeAgent.MountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cakeagent_CakeAgent.MountRequest, Cakeagent_CakeAgent.MountReply> {
    return self.makeUnaryCall(
      path: Cakeagent_CakeAgentServiceClientMetadata.Methods.umount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUmountInterceptors() ?? []
    )
  }

  /// Bidirectional streaming call to Tunnel
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func tunnel(
    callOptions: CallOptions? = nil,
    handler: @escaping (Cakeagent_CakeAgent.TunnelMessage) -> Void
  ) -> BidirectionalStreamingCall<Cakeagent_CakeAgent.TunnelMessage, Cakeagent_CakeAgent.TunnelMessage> {
    return self.makeBidirectionalStreamingCall(
      path: Cakeagent_CakeAgentServiceClientMetadata.Methods.tunnel.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTunnelInterceptors() ?? [],
      handler: handler
    )
  }

  /// Server streaming call to Events
  ///
  /// - Parameters:
  ///   - request: Request to send to Events.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func events(
    _ request: Cakeagent_CakeAgent.Empty,
    callOptions: CallOptions? = nil,
    handler: @escaping (Cakeagent_CakeAgent.TunnelPortForwardEvent) -> Void
  ) -> ServerStreamingCall<Cakeagent_CakeAgent.Empty, Cakeagent_CakeAgent.TunnelPortForwardEvent> {
    return self.makeServerStreamingCall(
      path: Cakeagent_CakeAgentServiceClientMetadata.Methods.events.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEventsInterceptors() ?? [],
      handler: handler
    )
  }
}

@available(*, deprecated)
extension Cakeagent_CakeAgentServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Cakeagent_CakeAgentServiceNIOClient")
public final class Cakeagent_CakeAgentServiceClient: Cakeagent_CakeAgentServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Cakeagent_CakeAgentServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Cakeagent_CakeAgentServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the cakeagent.CakeAgentService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cakeagent_CakeAgentServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Cakeagent_CakeAgentServiceNIOClient: Cakeagent_CakeAgentServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cakeagent_CakeAgentServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the cakeagent.CakeAgentService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cakeagent_CakeAgentServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Cakeagent_CakeAgentServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cakeagent_CakeAgentServiceClientInterceptorFactoryProtocol? { get }

  func makeResizeDiskCall(
    _ request: Cakeagent_CakeAgent.Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cakeagent_CakeAgent.Empty, Cakeagent_CakeAgent.ResizeReply>

  func makeInfoCall(
    _ request: Cakeagent_CakeAgent.Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cakeagent_CakeAgent.Empty, Cakeagent_CakeAgent.InfoReply>

  func makeShutdownCall(
    _ request: Cakeagent_CakeAgent.Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cakeagent_CakeAgent.Empty, Cakeagent_CakeAgent.RunReply>

  func makeRunCall(
    _ request: Cakeagent_CakeAgent.RunCommand,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cakeagent_CakeAgent.RunCommand, Cakeagent_CakeAgent.RunReply>

  func makeExecuteCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<Cakeagent_CakeAgent.ExecuteRequest, Cakeagent_CakeAgent.ExecuteResponse>

  func makeMountCall(
    _ request: Cakeagent_CakeAgent.MountRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cakeagent_CakeAgent.MountRequest, Cakeagent_CakeAgent.MountReply>

  func makeUmountCall(
    _ request: Cakeagent_CakeAgent.MountRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cakeagent_CakeAgent.MountRequest, Cakeagent_CakeAgent.MountReply>

  func makeTunnelCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<Cakeagent_CakeAgent.TunnelMessage, Cakeagent_CakeAgent.TunnelMessage>

  func makeEventsCall(
    _ request: Cakeagent_CakeAgent.Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Cakeagent_CakeAgent.Empty, Cakeagent_CakeAgent.TunnelPortForwardEvent>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cakeagent_CakeAgentServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Cakeagent_CakeAgentServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Cakeagent_CakeAgentServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeResizeDiskCall(
    _ request: Cakeagent_CakeAgent.Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cakeagent_CakeAgent.Empty, Cakeagent_CakeAgent.ResizeReply> {
    return self.makeAsyncUnaryCall(
      path: Cakeagent_CakeAgentServiceClientMetadata.Methods.resizeDisk.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResizeDiskInterceptors() ?? []
    )
  }

  public func makeInfoCall(
    _ request: Cakeagent_CakeAgent.Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cakeagent_CakeAgent.Empty, Cakeagent_CakeAgent.InfoReply> {
    return self.makeAsyncUnaryCall(
      path: Cakeagent_CakeAgentServiceClientMetadata.Methods.info.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInfoInterceptors() ?? []
    )
  }

  public func makeShutdownCall(
    _ request: Cakeagent_CakeAgent.Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cakeagent_CakeAgent.Empty, Cakeagent_CakeAgent.RunReply> {
    return self.makeAsyncUnaryCall(
      path: Cakeagent_CakeAgentServiceClientMetadata.Methods.shutdown.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeShutdownInterceptors() ?? []
    )
  }

  public func makeRunCall(
    _ request: Cakeagent_CakeAgent.RunCommand,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cakeagent_CakeAgent.RunCommand, Cakeagent_CakeAgent.RunReply> {
    return self.makeAsyncUnaryCall(
      path: Cakeagent_CakeAgentServiceClientMetadata.Methods.run.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRunInterceptors() ?? []
    )
  }

  public func makeExecuteCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<Cakeagent_CakeAgent.ExecuteRequest, Cakeagent_CakeAgent.ExecuteResponse> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: Cakeagent_CakeAgentServiceClientMetadata.Methods.execute.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExecuteInterceptors() ?? []
    )
  }

  public func makeMountCall(
    _ request: Cakeagent_CakeAgent.MountRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cakeagent_CakeAgent.MountRequest, Cakeagent_CakeAgent.MountReply> {
    return self.makeAsyncUnaryCall(
      path: Cakeagent_CakeAgentServiceClientMetadata.Methods.mount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMountInterceptors() ?? []
    )
  }

  public func makeUmountCall(
    _ request: Cakeagent_CakeAgent.MountRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cakeagent_CakeAgent.MountRequest, Cakeagent_CakeAgent.MountReply> {
    return self.makeAsyncUnaryCall(
      path: Cakeagent_CakeAgentServiceClientMetadata.Methods.umount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUmountInterceptors() ?? []
    )
  }

  public func makeTunnelCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<Cakeagent_CakeAgent.TunnelMessage, Cakeagent_CakeAgent.TunnelMessage> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: Cakeagent_CakeAgentServiceClientMetadata.Methods.tunnel.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTunnelInterceptors() ?? []
    )
  }

  public func makeEventsCall(
    _ request: Cakeagent_CakeAgent.Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Cakeagent_CakeAgent.Empty, Cakeagent_CakeAgent.TunnelPortForwardEvent> {
    return self.makeAsyncServerStreamingCall(
      path: Cakeagent_CakeAgentServiceClientMetadata.Methods.events.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEventsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cakeagent_CakeAgentServiceAsyncClientProtocol {
  public func resizeDisk(
    _ request: Cakeagent_CakeAgent.Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Cakeagent_CakeAgent.ResizeReply {
    return try await self.performAsyncUnaryCall(
      path: Cakeagent_CakeAgentServiceClientMetadata.Methods.resizeDisk.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResizeDiskInterceptors() ?? []
    )
  }

  public func info(
    _ request: Cakeagent_CakeAgent.Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Cakeagent_CakeAgent.InfoReply {
    return try await self.performAsyncUnaryCall(
      path: Cakeagent_CakeAgentServiceClientMetadata.Methods.info.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInfoInterceptors() ?? []
    )
  }

  public func shutdown(
    _ request: Cakeagent_CakeAgent.Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Cakeagent_CakeAgent.RunReply {
    return try await self.performAsyncUnaryCall(
      path: Cakeagent_CakeAgentServiceClientMetadata.Methods.shutdown.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeShutdownInterceptors() ?? []
    )
  }

  public func run(
    _ request: Cakeagent_CakeAgent.RunCommand,
    callOptions: CallOptions? = nil
  ) async throws -> Cakeagent_CakeAgent.RunReply {
    return try await self.performAsyncUnaryCall(
      path: Cakeagent_CakeAgentServiceClientMetadata.Methods.run.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRunInterceptors() ?? []
    )
  }

  public func execute<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Cakeagent_CakeAgent.ExecuteResponse> where RequestStream: Sequence, RequestStream.Element == Cakeagent_CakeAgent.ExecuteRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Cakeagent_CakeAgentServiceClientMetadata.Methods.execute.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExecuteInterceptors() ?? []
    )
  }

  public func execute<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Cakeagent_CakeAgent.ExecuteResponse> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Cakeagent_CakeAgent.ExecuteRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Cakeagent_CakeAgentServiceClientMetadata.Methods.execute.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExecuteInterceptors() ?? []
    )
  }

  public func mount(
    _ request: Cakeagent_CakeAgent.MountRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cakeagent_CakeAgent.MountReply {
    return try await self.performAsyncUnaryCall(
      path: Cakeagent_CakeAgentServiceClientMetadata.Methods.mount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMountInterceptors() ?? []
    )
  }

  public func umount(
    _ request: Cakeagent_CakeAgent.MountRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cakeagent_CakeAgent.MountReply {
    return try await self.performAsyncUnaryCall(
      path: Cakeagent_CakeAgentServiceClientMetadata.Methods.umount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUmountInterceptors() ?? []
    )
  }

  public func tunnel<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Cakeagent_CakeAgent.TunnelMessage> where RequestStream: Sequence, RequestStream.Element == Cakeagent_CakeAgent.TunnelMessage {
    return self.performAsyncBidirectionalStreamingCall(
      path: Cakeagent_CakeAgentServiceClientMetadata.Methods.tunnel.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTunnelInterceptors() ?? []
    )
  }

  public func tunnel<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Cakeagent_CakeAgent.TunnelMessage> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Cakeagent_CakeAgent.TunnelMessage {
    return self.performAsyncBidirectionalStreamingCall(
      path: Cakeagent_CakeAgentServiceClientMetadata.Methods.tunnel.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTunnelInterceptors() ?? []
    )
  }

  public func events(
    _ request: Cakeagent_CakeAgent.Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Cakeagent_CakeAgent.TunnelPortForwardEvent> {
    return self.performAsyncServerStreamingCall(
      path: Cakeagent_CakeAgentServiceClientMetadata.Methods.events.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEventsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Cakeagent_CakeAgentServiceAsyncClient: Cakeagent_CakeAgentServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cakeagent_CakeAgentServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cakeagent_CakeAgentServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Cakeagent_CakeAgentServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'resizeDisk'.
  func makeResizeDiskInterceptors() -> [ClientInterceptor<Cakeagent_CakeAgent.Empty, Cakeagent_CakeAgent.ResizeReply>]

  /// - Returns: Interceptors to use when invoking 'info'.
  func makeInfoInterceptors() -> [ClientInterceptor<Cakeagent_CakeAgent.Empty, Cakeagent_CakeAgent.InfoReply>]

  /// - Returns: Interceptors to use when invoking 'shutdown'.
  func makeShutdownInterceptors() -> [ClientInterceptor<Cakeagent_CakeAgent.Empty, Cakeagent_CakeAgent.RunReply>]

  /// - Returns: Interceptors to use when invoking 'run'.
  func makeRunInterceptors() -> [ClientInterceptor<Cakeagent_CakeAgent.RunCommand, Cakeagent_CakeAgent.RunReply>]

  /// - Returns: Interceptors to use when invoking 'execute'.
  func makeExecuteInterceptors() -> [ClientInterceptor<Cakeagent_CakeAgent.ExecuteRequest, Cakeagent_CakeAgent.ExecuteResponse>]

  /// - Returns: Interceptors to use when invoking 'mount'.
  func makeMountInterceptors() -> [ClientInterceptor<Cakeagent_CakeAgent.MountRequest, Cakeagent_CakeAgent.MountReply>]

  /// - Returns: Interceptors to use when invoking 'umount'.
  func makeUmountInterceptors() -> [ClientInterceptor<Cakeagent_CakeAgent.MountRequest, Cakeagent_CakeAgent.MountReply>]

  /// - Returns: Interceptors to use when invoking 'tunnel'.
  func makeTunnelInterceptors() -> [ClientInterceptor<Cakeagent_CakeAgent.TunnelMessage, Cakeagent_CakeAgent.TunnelMessage>]

  /// - Returns: Interceptors to use when invoking 'events'.
  func makeEventsInterceptors() -> [ClientInterceptor<Cakeagent_CakeAgent.Empty, Cakeagent_CakeAgent.TunnelPortForwardEvent>]
}

public enum Cakeagent_CakeAgentServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "CakeAgentService",
    fullName: "cakeagent.CakeAgentService",
    methods: [
      Cakeagent_CakeAgentServiceClientMetadata.Methods.resizeDisk,
      Cakeagent_CakeAgentServiceClientMetadata.Methods.info,
      Cakeagent_CakeAgentServiceClientMetadata.Methods.shutdown,
      Cakeagent_CakeAgentServiceClientMetadata.Methods.run,
      Cakeagent_CakeAgentServiceClientMetadata.Methods.execute,
      Cakeagent_CakeAgentServiceClientMetadata.Methods.mount,
      Cakeagent_CakeAgentServiceClientMetadata.Methods.umount,
      Cakeagent_CakeAgentServiceClientMetadata.Methods.tunnel,
      Cakeagent_CakeAgentServiceClientMetadata.Methods.events,
    ]
  )

  public enum Methods {
    public static let resizeDisk = GRPCMethodDescriptor(
      name: "ResizeDisk",
      path: "/cakeagent.CakeAgentService/ResizeDisk",
      type: GRPCCallType.unary
    )

    public static let info = GRPCMethodDescriptor(
      name: "Info",
      path: "/cakeagent.CakeAgentService/Info",
      type: GRPCCallType.unary
    )

    public static let shutdown = GRPCMethodDescriptor(
      name: "Shutdown",
      path: "/cakeagent.CakeAgentService/Shutdown",
      type: GRPCCallType.unary
    )

    public static let run = GRPCMethodDescriptor(
      name: "Run",
      path: "/cakeagent.CakeAgentService/Run",
      type: GRPCCallType.unary
    )

    public static let execute = GRPCMethodDescriptor(
      name: "Execute",
      path: "/cakeagent.CakeAgentService/Execute",
      type: GRPCCallType.bidirectionalStreaming
    )

    public static let mount = GRPCMethodDescriptor(
      name: "Mount",
      path: "/cakeagent.CakeAgentService/Mount",
      type: GRPCCallType.unary
    )

    public static let umount = GRPCMethodDescriptor(
      name: "Umount",
      path: "/cakeagent.CakeAgentService/Umount",
      type: GRPCCallType.unary
    )

    public static let tunnel = GRPCMethodDescriptor(
      name: "Tunnel",
      path: "/cakeagent.CakeAgentService/Tunnel",
      type: GRPCCallType.bidirectionalStreaming
    )

    public static let events = GRPCMethodDescriptor(
      name: "Events",
      path: "/cakeagent.CakeAgentService/Events",
      type: GRPCCallType.serverStreaming
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Cakeagent_CakeAgentServiceProvider: CallHandlerProvider {
  var interceptors: Cakeagent_CakeAgentServiceServerInterceptorFactoryProtocol? { get }

  func resizeDisk(request: Cakeagent_CakeAgent.Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Cakeagent_CakeAgent.ResizeReply>

  func info(request: Cakeagent_CakeAgent.Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Cakeagent_CakeAgent.InfoReply>

  func shutdown(request: Cakeagent_CakeAgent.Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Cakeagent_CakeAgent.RunReply>

  func run(request: Cakeagent_CakeAgent.RunCommand, context: StatusOnlyCallContext) -> EventLoopFuture<Cakeagent_CakeAgent.RunReply>

  func execute(context: StreamingResponseCallContext<Cakeagent_CakeAgent.ExecuteResponse>) -> EventLoopFuture<(StreamEvent<Cakeagent_CakeAgent.ExecuteRequest>) -> Void>

  func mount(request: Cakeagent_CakeAgent.MountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cakeagent_CakeAgent.MountReply>

  func umount(request: Cakeagent_CakeAgent.MountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cakeagent_CakeAgent.MountReply>

  func tunnel(context: StreamingResponseCallContext<Cakeagent_CakeAgent.TunnelMessage>) -> EventLoopFuture<(StreamEvent<Cakeagent_CakeAgent.TunnelMessage>) -> Void>

  func events(request: Cakeagent_CakeAgent.Empty, context: StreamingResponseCallContext<Cakeagent_CakeAgent.TunnelPortForwardEvent>) -> EventLoopFuture<GRPCStatus>
}

extension Cakeagent_CakeAgentServiceProvider {
  public var serviceName: Substring {
    return Cakeagent_CakeAgentServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ResizeDisk":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cakeagent_CakeAgent.Empty>(),
        responseSerializer: ProtobufSerializer<Cakeagent_CakeAgent.ResizeReply>(),
        interceptors: self.interceptors?.makeResizeDiskInterceptors() ?? [],
        userFunction: self.resizeDisk(request:context:)
      )

    case "Info":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cakeagent_CakeAgent.Empty>(),
        responseSerializer: ProtobufSerializer<Cakeagent_CakeAgent.InfoReply>(),
        interceptors: self.interceptors?.makeInfoInterceptors() ?? [],
        userFunction: self.info(request:context:)
      )

    case "Shutdown":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cakeagent_CakeAgent.Empty>(),
        responseSerializer: ProtobufSerializer<Cakeagent_CakeAgent.RunReply>(),
        interceptors: self.interceptors?.makeShutdownInterceptors() ?? [],
        userFunction: self.shutdown(request:context:)
      )

    case "Run":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cakeagent_CakeAgent.RunCommand>(),
        responseSerializer: ProtobufSerializer<Cakeagent_CakeAgent.RunReply>(),
        interceptors: self.interceptors?.makeRunInterceptors() ?? [],
        userFunction: self.run(request:context:)
      )

    case "Execute":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cakeagent_CakeAgent.ExecuteRequest>(),
        responseSerializer: ProtobufSerializer<Cakeagent_CakeAgent.ExecuteResponse>(),
        interceptors: self.interceptors?.makeExecuteInterceptors() ?? [],
        observerFactory: self.execute(context:)
      )

    case "Mount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cakeagent_CakeAgent.MountRequest>(),
        responseSerializer: ProtobufSerializer<Cakeagent_CakeAgent.MountReply>(),
        interceptors: self.interceptors?.makeMountInterceptors() ?? [],
        userFunction: self.mount(request:context:)
      )

    case "Umount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cakeagent_CakeAgent.MountRequest>(),
        responseSerializer: ProtobufSerializer<Cakeagent_CakeAgent.MountReply>(),
        interceptors: self.interceptors?.makeUmountInterceptors() ?? [],
        userFunction: self.umount(request:context:)
      )

    case "Tunnel":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cakeagent_CakeAgent.TunnelMessage>(),
        responseSerializer: ProtobufSerializer<Cakeagent_CakeAgent.TunnelMessage>(),
        interceptors: self.interceptors?.makeTunnelInterceptors() ?? [],
        observerFactory: self.tunnel(context:)
      )

    case "Events":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cakeagent_CakeAgent.Empty>(),
        responseSerializer: ProtobufSerializer<Cakeagent_CakeAgent.TunnelPortForwardEvent>(),
        interceptors: self.interceptors?.makeEventsInterceptors() ?? [],
        userFunction: self.events(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Cakeagent_CakeAgentServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cakeagent_CakeAgentServiceServerInterceptorFactoryProtocol? { get }

  func resizeDisk(
    request: Cakeagent_CakeAgent.Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cakeagent_CakeAgent.ResizeReply

  func info(
    request: Cakeagent_CakeAgent.Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cakeagent_CakeAgent.InfoReply

  func shutdown(
    request: Cakeagent_CakeAgent.Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cakeagent_CakeAgent.RunReply

  func run(
    request: Cakeagent_CakeAgent.RunCommand,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cakeagent_CakeAgent.RunReply

  func execute(
    requestStream: GRPCAsyncRequestStream<Cakeagent_CakeAgent.ExecuteRequest>,
    responseStream: GRPCAsyncResponseStreamWriter<Cakeagent_CakeAgent.ExecuteResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws

  func mount(
    request: Cakeagent_CakeAgent.MountRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cakeagent_CakeAgent.MountReply

  func umount(
    request: Cakeagent_CakeAgent.MountRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cakeagent_CakeAgent.MountReply

  func tunnel(
    requestStream: GRPCAsyncRequestStream<Cakeagent_CakeAgent.TunnelMessage>,
    responseStream: GRPCAsyncResponseStreamWriter<Cakeagent_CakeAgent.TunnelMessage>,
    context: GRPCAsyncServerCallContext
  ) async throws

  func events(
    request: Cakeagent_CakeAgent.Empty,
    responseStream: GRPCAsyncResponseStreamWriter<Cakeagent_CakeAgent.TunnelPortForwardEvent>,
    context: GRPCAsyncServerCallContext
  ) async throws
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cakeagent_CakeAgentServiceAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Cakeagent_CakeAgentServiceServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Cakeagent_CakeAgentServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Cakeagent_CakeAgentServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ResizeDisk":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cakeagent_CakeAgent.Empty>(),
        responseSerializer: ProtobufSerializer<Cakeagent_CakeAgent.ResizeReply>(),
        interceptors: self.interceptors?.makeResizeDiskInterceptors() ?? [],
        wrapping: { try await self.resizeDisk(request: $0, context: $1) }
      )

    case "Info":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cakeagent_CakeAgent.Empty>(),
        responseSerializer: ProtobufSerializer<Cakeagent_CakeAgent.InfoReply>(),
        interceptors: self.interceptors?.makeInfoInterceptors() ?? [],
        wrapping: { try await self.info(request: $0, context: $1) }
      )

    case "Shutdown":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cakeagent_CakeAgent.Empty>(),
        responseSerializer: ProtobufSerializer<Cakeagent_CakeAgent.RunReply>(),
        interceptors: self.interceptors?.makeShutdownInterceptors() ?? [],
        wrapping: { try await self.shutdown(request: $0, context: $1) }
      )

    case "Run":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cakeagent_CakeAgent.RunCommand>(),
        responseSerializer: ProtobufSerializer<Cakeagent_CakeAgent.RunReply>(),
        interceptors: self.interceptors?.makeRunInterceptors() ?? [],
        wrapping: { try await self.run(request: $0, context: $1) }
      )

    case "Execute":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cakeagent_CakeAgent.ExecuteRequest>(),
        responseSerializer: ProtobufSerializer<Cakeagent_CakeAgent.ExecuteResponse>(),
        interceptors: self.interceptors?.makeExecuteInterceptors() ?? [],
        wrapping: { try await self.execute(requestStream: $0, responseStream: $1, context: $2) }
      )

    case "Mount":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cakeagent_CakeAgent.MountRequest>(),
        responseSerializer: ProtobufSerializer<Cakeagent_CakeAgent.MountReply>(),
        interceptors: self.interceptors?.makeMountInterceptors() ?? [],
        wrapping: { try await self.mount(request: $0, context: $1) }
      )

    case "Umount":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cakeagent_CakeAgent.MountRequest>(),
        responseSerializer: ProtobufSerializer<Cakeagent_CakeAgent.MountReply>(),
        interceptors: self.interceptors?.makeUmountInterceptors() ?? [],
        wrapping: { try await self.umount(request: $0, context: $1) }
      )

    case "Tunnel":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cakeagent_CakeAgent.TunnelMessage>(),
        responseSerializer: ProtobufSerializer<Cakeagent_CakeAgent.TunnelMessage>(),
        interceptors: self.interceptors?.makeTunnelInterceptors() ?? [],
        wrapping: { try await self.tunnel(requestStream: $0, responseStream: $1, context: $2) }
      )

    case "Events":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cakeagent_CakeAgent.Empty>(),
        responseSerializer: ProtobufSerializer<Cakeagent_CakeAgent.TunnelPortForwardEvent>(),
        interceptors: self.interceptors?.makeEventsInterceptors() ?? [],
        wrapping: { try await self.events(request: $0, responseStream: $1, context: $2) }
      )

    default:
      return nil
    }
  }
}

public protocol Cakeagent_CakeAgentServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'resizeDisk'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeResizeDiskInterceptors() -> [ServerInterceptor<Cakeagent_CakeAgent.Empty, Cakeagent_CakeAgent.ResizeReply>]

  /// - Returns: Interceptors to use when handling 'info'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeInfoInterceptors() -> [ServerInterceptor<Cakeagent_CakeAgent.Empty, Cakeagent_CakeAgent.InfoReply>]

  /// - Returns: Interceptors to use when handling 'shutdown'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeShutdownInterceptors() -> [ServerInterceptor<Cakeagent_CakeAgent.Empty, Cakeagent_CakeAgent.RunReply>]

  /// - Returns: Interceptors to use when handling 'run'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRunInterceptors() -> [ServerInterceptor<Cakeagent_CakeAgent.RunCommand, Cakeagent_CakeAgent.RunReply>]

  /// - Returns: Interceptors to use when handling 'execute'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeExecuteInterceptors() -> [ServerInterceptor<Cakeagent_CakeAgent.ExecuteRequest, Cakeagent_CakeAgent.ExecuteResponse>]

  /// - Returns: Interceptors to use when handling 'mount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMountInterceptors() -> [ServerInterceptor<Cakeagent_CakeAgent.MountRequest, Cakeagent_CakeAgent.MountReply>]

  /// - Returns: Interceptors to use when handling 'umount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUmountInterceptors() -> [ServerInterceptor<Cakeagent_CakeAgent.MountRequest, Cakeagent_CakeAgent.MountReply>]

  /// - Returns: Interceptors to use when handling 'tunnel'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTunnelInterceptors() -> [ServerInterceptor<Cakeagent_CakeAgent.TunnelMessage, Cakeagent_CakeAgent.TunnelMessage>]

  /// - Returns: Interceptors to use when handling 'events'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEventsInterceptors() -> [ServerInterceptor<Cakeagent_CakeAgent.Empty, Cakeagent_CakeAgent.TunnelPortForwardEvent>]
}

public enum Cakeagent_CakeAgentServiceServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "CakeAgentService",
    fullName: "cakeagent.CakeAgentService",
    methods: [
      Cakeagent_CakeAgentServiceServerMetadata.Methods.resizeDisk,
      Cakeagent_CakeAgentServiceServerMetadata.Methods.info,
      Cakeagent_CakeAgentServiceServerMetadata.Methods.shutdown,
      Cakeagent_CakeAgentServiceServerMetadata.Methods.run,
      Cakeagent_CakeAgentServiceServerMetadata.Methods.execute,
      Cakeagent_CakeAgentServiceServerMetadata.Methods.mount,
      Cakeagent_CakeAgentServiceServerMetadata.Methods.umount,
      Cakeagent_CakeAgentServiceServerMetadata.Methods.tunnel,
      Cakeagent_CakeAgentServiceServerMetadata.Methods.events,
    ]
  )

  public enum Methods {
    public static let resizeDisk = GRPCMethodDescriptor(
      name: "ResizeDisk",
      path: "/cakeagent.CakeAgentService/ResizeDisk",
      type: GRPCCallType.unary
    )

    public static let info = GRPCMethodDescriptor(
      name: "Info",
      path: "/cakeagent.CakeAgentService/Info",
      type: GRPCCallType.unary
    )

    public static let shutdown = GRPCMethodDescriptor(
      name: "Shutdown",
      path: "/cakeagent.CakeAgentService/Shutdown",
      type: GRPCCallType.unary
    )

    public static let run = GRPCMethodDescriptor(
      name: "Run",
      path: "/cakeagent.CakeAgentService/Run",
      type: GRPCCallType.unary
    )

    public static let execute = GRPCMethodDescriptor(
      name: "Execute",
      path: "/cakeagent.CakeAgentService/Execute",
      type: GRPCCallType.bidirectionalStreaming
    )

    public static let mount = GRPCMethodDescriptor(
      name: "Mount",
      path: "/cakeagent.CakeAgentService/Mount",
      type: GRPCCallType.unary
    )

    public static let umount = GRPCMethodDescriptor(
      name: "Umount",
      path: "/cakeagent.CakeAgentService/Umount",
      type: GRPCCallType.unary
    )

    public static let tunnel = GRPCMethodDescriptor(
      name: "Tunnel",
      path: "/cakeagent.CakeAgentService/Tunnel",
      type: GRPCCallType.bidirectionalStreaming
    )

    public static let events = GRPCMethodDescriptor(
      name: "Events",
      path: "/cakeagent.CakeAgentService/Events",
      type: GRPCCallType.serverStreaming
    )
  }
}

//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: agent.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Cakeagent_AgentClient`, then call methods of this protocol to make API calls.
public protocol Cakeagent_AgentClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cakeagent_AgentClientInterceptorFactoryProtocol? { get }

  func info(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Cakeagent_InfoReply>

  func run(
    _ request: Cakeagent_RunCommand,
    callOptions: CallOptions?
  ) -> UnaryCall<Cakeagent_RunCommand, Cakeagent_RunReply>

  func execute(
    callOptions: CallOptions?,
    handler: @escaping (Cakeagent_ExecuteResponse) -> Void
  ) -> BidirectionalStreamingCall<Cakeagent_ExecuteRequest, Cakeagent_ExecuteResponse>

  func mount(
    _ request: Cakeagent_MountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cakeagent_MountRequest, Cakeagent_MountReply>

  func umount(
    _ request: Cakeagent_MountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cakeagent_MountRequest, Cakeagent_MountReply>
}

extension Cakeagent_AgentClientProtocol {
  public var serviceName: String {
    return "cakeagent.Agent"
  }

  /// Unary call to Info
  ///
  /// - Parameters:
  ///   - request: Request to send to Info.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func info(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Cakeagent_InfoReply> {
    return self.makeUnaryCall(
      path: Cakeagent_AgentClientMetadata.Methods.info.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInfoInterceptors() ?? []
    )
  }

  /// Unary call to Run
  ///
  /// - Parameters:
  ///   - request: Request to send to Run.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func run(
    _ request: Cakeagent_RunCommand,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cakeagent_RunCommand, Cakeagent_RunReply> {
    return self.makeUnaryCall(
      path: Cakeagent_AgentClientMetadata.Methods.run.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRunInterceptors() ?? []
    )
  }

  /// Bidirectional streaming call to Execute
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func execute(
    callOptions: CallOptions? = nil,
    handler: @escaping (Cakeagent_ExecuteResponse) -> Void
  ) -> BidirectionalStreamingCall<Cakeagent_ExecuteRequest, Cakeagent_ExecuteResponse> {
    return self.makeBidirectionalStreamingCall(
      path: Cakeagent_AgentClientMetadata.Methods.execute.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExecuteInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unary call to Mount
  ///
  /// - Parameters:
  ///   - request: Request to send to Mount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func mount(
    _ request: Cakeagent_MountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cakeagent_MountRequest, Cakeagent_MountReply> {
    return self.makeUnaryCall(
      path: Cakeagent_AgentClientMetadata.Methods.mount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMountInterceptors() ?? []
    )
  }

  /// Unary call to Umount
  ///
  /// - Parameters:
  ///   - request: Request to send to Umount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func umount(
    _ request: Cakeagent_MountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cakeagent_MountRequest, Cakeagent_MountReply> {
    return self.makeUnaryCall(
      path: Cakeagent_AgentClientMetadata.Methods.umount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUmountInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Cakeagent_AgentClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Cakeagent_AgentNIOClient")
public final class Cakeagent_AgentClient: Cakeagent_AgentClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Cakeagent_AgentClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Cakeagent_AgentClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the cakeagent.Agent service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cakeagent_AgentClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Cakeagent_AgentNIOClient: Cakeagent_AgentClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cakeagent_AgentClientInterceptorFactoryProtocol?

  /// Creates a client for the cakeagent.Agent service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cakeagent_AgentClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Cakeagent_AgentAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cakeagent_AgentClientInterceptorFactoryProtocol? { get }

  func makeInfoCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Cakeagent_InfoReply>

  func makeRunCall(
    _ request: Cakeagent_RunCommand,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cakeagent_RunCommand, Cakeagent_RunReply>

  func makeExecuteCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<Cakeagent_ExecuteRequest, Cakeagent_ExecuteResponse>

  func makeMountCall(
    _ request: Cakeagent_MountRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cakeagent_MountRequest, Cakeagent_MountReply>

  func makeUmountCall(
    _ request: Cakeagent_MountRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cakeagent_MountRequest, Cakeagent_MountReply>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cakeagent_AgentAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Cakeagent_AgentClientMetadata.serviceDescriptor
  }

  public var interceptors: Cakeagent_AgentClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeInfoCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Cakeagent_InfoReply> {
    return self.makeAsyncUnaryCall(
      path: Cakeagent_AgentClientMetadata.Methods.info.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInfoInterceptors() ?? []
    )
  }

  public func makeRunCall(
    _ request: Cakeagent_RunCommand,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cakeagent_RunCommand, Cakeagent_RunReply> {
    return self.makeAsyncUnaryCall(
      path: Cakeagent_AgentClientMetadata.Methods.run.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRunInterceptors() ?? []
    )
  }

  public func makeExecuteCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<Cakeagent_ExecuteRequest, Cakeagent_ExecuteResponse> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: Cakeagent_AgentClientMetadata.Methods.execute.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExecuteInterceptors() ?? []
    )
  }

  public func makeMountCall(
    _ request: Cakeagent_MountRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cakeagent_MountRequest, Cakeagent_MountReply> {
    return self.makeAsyncUnaryCall(
      path: Cakeagent_AgentClientMetadata.Methods.mount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMountInterceptors() ?? []
    )
  }

  public func makeUmountCall(
    _ request: Cakeagent_MountRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cakeagent_MountRequest, Cakeagent_MountReply> {
    return self.makeAsyncUnaryCall(
      path: Cakeagent_AgentClientMetadata.Methods.umount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUmountInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cakeagent_AgentAsyncClientProtocol {
  public func info(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Cakeagent_InfoReply {
    return try await self.performAsyncUnaryCall(
      path: Cakeagent_AgentClientMetadata.Methods.info.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInfoInterceptors() ?? []
    )
  }

  public func run(
    _ request: Cakeagent_RunCommand,
    callOptions: CallOptions? = nil
  ) async throws -> Cakeagent_RunReply {
    return try await self.performAsyncUnaryCall(
      path: Cakeagent_AgentClientMetadata.Methods.run.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRunInterceptors() ?? []
    )
  }

  public func execute<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Cakeagent_ExecuteResponse> where RequestStream: Sequence, RequestStream.Element == Cakeagent_ExecuteRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Cakeagent_AgentClientMetadata.Methods.execute.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExecuteInterceptors() ?? []
    )
  }

  public func execute<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Cakeagent_ExecuteResponse> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Cakeagent_ExecuteRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Cakeagent_AgentClientMetadata.Methods.execute.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExecuteInterceptors() ?? []
    )
  }

  public func mount(
    _ request: Cakeagent_MountRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cakeagent_MountReply {
    return try await self.performAsyncUnaryCall(
      path: Cakeagent_AgentClientMetadata.Methods.mount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMountInterceptors() ?? []
    )
  }

  public func umount(
    _ request: Cakeagent_MountRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cakeagent_MountReply {
    return try await self.performAsyncUnaryCall(
      path: Cakeagent_AgentClientMetadata.Methods.umount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUmountInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Cakeagent_AgentAsyncClient: Cakeagent_AgentAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cakeagent_AgentClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cakeagent_AgentClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Cakeagent_AgentClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'info'.
  func makeInfoInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Cakeagent_InfoReply>]

  /// - Returns: Interceptors to use when invoking 'run'.
  func makeRunInterceptors() -> [ClientInterceptor<Cakeagent_RunCommand, Cakeagent_RunReply>]

  /// - Returns: Interceptors to use when invoking 'execute'.
  func makeExecuteInterceptors() -> [ClientInterceptor<Cakeagent_ExecuteRequest, Cakeagent_ExecuteResponse>]

  /// - Returns: Interceptors to use when invoking 'mount'.
  func makeMountInterceptors() -> [ClientInterceptor<Cakeagent_MountRequest, Cakeagent_MountReply>]

  /// - Returns: Interceptors to use when invoking 'umount'.
  func makeUmountInterceptors() -> [ClientInterceptor<Cakeagent_MountRequest, Cakeagent_MountReply>]
}

public enum Cakeagent_AgentClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Agent",
    fullName: "cakeagent.Agent",
    methods: [
      Cakeagent_AgentClientMetadata.Methods.info,
      Cakeagent_AgentClientMetadata.Methods.run,
      Cakeagent_AgentClientMetadata.Methods.execute,
      Cakeagent_AgentClientMetadata.Methods.mount,
      Cakeagent_AgentClientMetadata.Methods.umount,
    ]
  )

  public enum Methods {
    public static let info = GRPCMethodDescriptor(
      name: "Info",
      path: "/cakeagent.Agent/Info",
      type: GRPCCallType.unary
    )

    public static let run = GRPCMethodDescriptor(
      name: "Run",
      path: "/cakeagent.Agent/Run",
      type: GRPCCallType.unary
    )

    public static let execute = GRPCMethodDescriptor(
      name: "Execute",
      path: "/cakeagent.Agent/Execute",
      type: GRPCCallType.bidirectionalStreaming
    )

    public static let mount = GRPCMethodDescriptor(
      name: "Mount",
      path: "/cakeagent.Agent/Mount",
      type: GRPCCallType.unary
    )

    public static let umount = GRPCMethodDescriptor(
      name: "Umount",
      path: "/cakeagent.Agent/Umount",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Cakeagent_AgentProvider: CallHandlerProvider {
  var interceptors: Cakeagent_AgentServerInterceptorFactoryProtocol? { get }

  func info(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Cakeagent_InfoReply>

  func run(request: Cakeagent_RunCommand, context: StatusOnlyCallContext) -> EventLoopFuture<Cakeagent_RunReply>

  func execute(context: StreamingResponseCallContext<Cakeagent_ExecuteResponse>) -> EventLoopFuture<(StreamEvent<Cakeagent_ExecuteRequest>) -> Void>

  func mount(request: Cakeagent_MountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cakeagent_MountReply>

  func umount(request: Cakeagent_MountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cakeagent_MountReply>
}

extension Cakeagent_AgentProvider {
  public var serviceName: Substring {
    return Cakeagent_AgentServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Info":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Cakeagent_InfoReply>(),
        interceptors: self.interceptors?.makeInfoInterceptors() ?? [],
        userFunction: self.info(request:context:)
      )

    case "Run":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cakeagent_RunCommand>(),
        responseSerializer: ProtobufSerializer<Cakeagent_RunReply>(),
        interceptors: self.interceptors?.makeRunInterceptors() ?? [],
        userFunction: self.run(request:context:)
      )

    case "Execute":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cakeagent_ExecuteRequest>(),
        responseSerializer: ProtobufSerializer<Cakeagent_ExecuteResponse>(),
        interceptors: self.interceptors?.makeExecuteInterceptors() ?? [],
        observerFactory: self.execute(context:)
      )

    case "Mount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cakeagent_MountRequest>(),
        responseSerializer: ProtobufSerializer<Cakeagent_MountReply>(),
        interceptors: self.interceptors?.makeMountInterceptors() ?? [],
        userFunction: self.mount(request:context:)
      )

    case "Umount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cakeagent_MountRequest>(),
        responseSerializer: ProtobufSerializer<Cakeagent_MountReply>(),
        interceptors: self.interceptors?.makeUmountInterceptors() ?? [],
        userFunction: self.umount(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Cakeagent_AgentAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cakeagent_AgentServerInterceptorFactoryProtocol? { get }

  func info(
    request: SwiftProtobuf.Google_Protobuf_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cakeagent_InfoReply

  func run(
    request: Cakeagent_RunCommand,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cakeagent_RunReply

  func execute(
    requestStream: GRPCAsyncRequestStream<Cakeagent_ExecuteRequest>,
    responseStream: GRPCAsyncResponseStreamWriter<Cakeagent_ExecuteResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws

  func mount(
    request: Cakeagent_MountRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cakeagent_MountReply

  func umount(
    request: Cakeagent_MountRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cakeagent_MountReply
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cakeagent_AgentAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Cakeagent_AgentServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Cakeagent_AgentServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Cakeagent_AgentServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Info":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Cakeagent_InfoReply>(),
        interceptors: self.interceptors?.makeInfoInterceptors() ?? [],
        wrapping: { try await self.info(request: $0, context: $1) }
      )

    case "Run":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cakeagent_RunCommand>(),
        responseSerializer: ProtobufSerializer<Cakeagent_RunReply>(),
        interceptors: self.interceptors?.makeRunInterceptors() ?? [],
        wrapping: { try await self.run(request: $0, context: $1) }
      )

    case "Execute":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cakeagent_ExecuteRequest>(),
        responseSerializer: ProtobufSerializer<Cakeagent_ExecuteResponse>(),
        interceptors: self.interceptors?.makeExecuteInterceptors() ?? [],
        wrapping: { try await self.execute(requestStream: $0, responseStream: $1, context: $2) }
      )

    case "Mount":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cakeagent_MountRequest>(),
        responseSerializer: ProtobufSerializer<Cakeagent_MountReply>(),
        interceptors: self.interceptors?.makeMountInterceptors() ?? [],
        wrapping: { try await self.mount(request: $0, context: $1) }
      )

    case "Umount":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cakeagent_MountRequest>(),
        responseSerializer: ProtobufSerializer<Cakeagent_MountReply>(),
        interceptors: self.interceptors?.makeUmountInterceptors() ?? [],
        wrapping: { try await self.umount(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol Cakeagent_AgentServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'info'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeInfoInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Cakeagent_InfoReply>]

  /// - Returns: Interceptors to use when handling 'run'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRunInterceptors() -> [ServerInterceptor<Cakeagent_RunCommand, Cakeagent_RunReply>]

  /// - Returns: Interceptors to use when handling 'execute'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeExecuteInterceptors() -> [ServerInterceptor<Cakeagent_ExecuteRequest, Cakeagent_ExecuteResponse>]

  /// - Returns: Interceptors to use when handling 'mount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMountInterceptors() -> [ServerInterceptor<Cakeagent_MountRequest, Cakeagent_MountReply>]

  /// - Returns: Interceptors to use when handling 'umount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUmountInterceptors() -> [ServerInterceptor<Cakeagent_MountRequest, Cakeagent_MountReply>]
}

public enum Cakeagent_AgentServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Agent",
    fullName: "cakeagent.Agent",
    methods: [
      Cakeagent_AgentServerMetadata.Methods.info,
      Cakeagent_AgentServerMetadata.Methods.run,
      Cakeagent_AgentServerMetadata.Methods.execute,
      Cakeagent_AgentServerMetadata.Methods.mount,
      Cakeagent_AgentServerMetadata.Methods.umount,
    ]
  )

  public enum Methods {
    public static let info = GRPCMethodDescriptor(
      name: "Info",
      path: "/cakeagent.Agent/Info",
      type: GRPCCallType.unary
    )

    public static let run = GRPCMethodDescriptor(
      name: "Run",
      path: "/cakeagent.Agent/Run",
      type: GRPCCallType.unary
    )

    public static let execute = GRPCMethodDescriptor(
      name: "Execute",
      path: "/cakeagent.Agent/Execute",
      type: GRPCCallType.bidirectionalStreaming
    )

    public static let mount = GRPCMethodDescriptor(
      name: "Mount",
      path: "/cakeagent.Agent/Mount",
      type: GRPCCallType.unary
    )

    public static let umount = GRPCMethodDescriptor(
      name: "Umount",
      path: "/cakeagent.Agent/Umount",
      type: GRPCCallType.unary
    )
  }
}
